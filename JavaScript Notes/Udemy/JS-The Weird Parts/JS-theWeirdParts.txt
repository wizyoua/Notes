1. Intro to course
Chapter 2 
	Conceptual Aside
	- Syntax Parser : a program that reads your code and determines what it does
	- Lexical Environment : where something sits physically in the code you write 
	- Execution Context: a wrapper to help manage the code that is running 

	- Name/Value Pair: a Name which maps to a unique value
	- Object: A collection of name value pairs


	- The global environment and the global object
		- Execution Context (Global)
			- Global Object : not inside a function 
			- outer environment : nothing at the global environment 
	
	- The execution context: Creation and Hoisting
		- Execution Context is created 
			(Creation Phase) : we have global object, 'this', Out envi., Setup memory space for variables and functions (Hoisting) before my code begins to gets executed, the JS engine has already set aside memory for all the variables and functions i created. (all variables are undefined in the creation phase)
			(Execution Phase): we have all the stuff as the creation phase except it now runs your code code line by line. 


	Conceptual Aside
		- Java script and Undefined
			- Uncaught Reference : var something was never defined so computer didn't make memory for it.

	Conceptual Aside 
		- Single Threaded: 
		- Synchronous Execution 
			- Synchronous: one at a time


	Function Invocation and Execution Stack 
		- Invocation: running a function 


	Functions, Context and Variable Environments
		Variable Environment: where the variables live


	Scope, ES6 and Let
		- Scope: where a variable is available in your code
		- let: allows javascript engine to use block scoping

	Asynchronous Callbacks 
		- 

Chapter 3
	Types and Javascript
		- Dynamic Typing: You Don't tell the engine what type of data a variable holds, it figures it out while your code is running. (java or c+ uses static typing)

	Primitive Types 6 types
		- Primitive type: a type of data that represents a single value
			- Undefined: represents a lack of existence
			- Null: represents lack of existence 
			- Boolean: true or false
			- Number: floating point number(there's always some decimals)
			- String: a sequence of characters
			- Symbol: used in es6 (next version of JS)

	Operators
		- Operators: special function that is syntactically differently
			- infix notation means the function operator sits between 2 parameters (3 + 4) the + is basically a function that the JS engine has.

	Operator Precedence and Associativity 
		- Precedence: which operator function gets called first, higher precedence wins
		- Associativity: what order operator function get called in: left to right or right to left - when operator functions have same precedence
		
	Coersion
		- Coersion: Converting a value from one type to another. Javascript tries its best to find out what something should be since it is dynamically typed
		(==) can cause unexpected issue because of coercion 
		use (===) strict equality 
	Exchange and Booleans

	Default Values
		- 
	Framework Aside
		- when loading js files it just stacks the javascript on top of eachother. You have to be careful what you name your vars because they might interfere unless the JS pulled is already minified.

Chapter 4 
	Objects and the Dot
		- object can have:
			* Primitive "Property"
			* Object "property"
			* Function "Method"
			- object have addresses to where these properties live in our computer

	Objects and Object Literals
		- var person = {}; is the same as new Object();

	Faking Namespaces
		- Namespace : container for variables and functions

	Json and Object Literals
		- json is inspired by javascript object literal notation

	Functions are Objects
		- First Class Function: everything you can do with other types, you can do with functions
			- function "a special type of object" can attach
				- Primitive
				- Object
				- Function
				- Name
				- Code "invocable"
	Function Statements and Function Expressions
		- Expression: unit of code that results in a value

	Concept Aside - by value vs by reference
		- a references a primitive value in a location of the computer memory
			if b = a, b will point to a new space in memory and will copy the primitive value of a to that new location (called by value)

		- a references a object
			if b = a then b will point to the same address  (by reference)

		Mutate: to change something
		Immutable: can't be changed

	Objects, functions and 'this'
		- everytime a function is run it gives us a variable called this

	Conceptual Aside Arrays - Collection of anything
		- arrays can hold anything becuase of dynamic typing

	Arguments and 'Spread'
		- aguments holds all those values to pass to whatever function your are calling
			- : the parameters you pass to a function (JS gives keyword of the same name which contains them all: )

	Functional Overloading


	Syntax Parsers
	anticipiting what you will do

	4.42 Dangerous Aside
	Automatic semicolon insertion. Semicolons in core JS is optional
		- if JS sees you are finishing a line and you go below to the next line it will inject automatically a semicolon. ALways put your own semicolon

	4.43 Framework aside
	Whitespace - Invisible characters that create literal space in your written code

	4.44 Immediately invoked function expressions (iife)
		- great tool for JS developer, will be used in many frameworks

	4.45 IIFE and Safe Code
		- Global Execution code -> hits object and then sees parenthesis that invokes-> new GEC for Execution context 
		- 

	4.46 Closures !!important
		- closures are feature of JS program language, they just happen. JS engine will make sure that a function you are running will always check if the variable you have are there. when you run a function it runs the way it is supposed to.

	4.47 Closures part2

	4.48 Function Factories
		- a function that returns or makes other things for me

	4.49 Closures and Callbacks
		- Callback function: function you give to another function to be run when the other function is finished 
	4.50 Call, Apply, Bind
		- all three of these have to do with the 'this' variable
			- .bind creates a copy
			- .call lets me decide what the 'this' keyword should point to
			- .apply exact same thing as call but cannot pass arguments, it only takes array of parameters

	4.51 Functional Programming
		- 

Chapter 5
	5.54 Understanding Prototype
		- Objects can have properties and methods
		 - obj.prop1 
		 - all objects have a prototype property (property is simply a reference to an object)
		 - objects can share all the same prototype if they want because it's just a reference

	5.55 Everything is an Object (or a primitive)


	5.56 Reflection and Extend
		- Reflection: an object can look at itself listing and changing its properties and methods

Chapter 6 
	6.57 Building Objects
		- Function Constructors 'new' and the history of JS
		- function constructors are just functions
		- Function constructor: a normal function that is used to construct objects - the 'this' variable points a new empty object, and that object is returned from the function automatically

	6.58 Function constructors and prototypes
		- function - a special type of object , is invocable, and every function has a prototype property (as soon as you use new operator) every time you use new you are basically 
		- In good code, methods are usually in the prototype while properties are mentioned early on
		- its better to put methods on prototype since it'll only be one.

	6.59 Dangerous Aside 'new' and functions
		- Best Convention: any function that intends to be function constructor use a capital letter for the name in the function
	
	6.60 Conceptual Aside Built in function constructors
		- We are looking at built in function constructors in order 

	6.61 Why you shouldn't use built in constructors with primitives
		- We 

	6.62 Dangerous Aside - Arrays and for ..in
		-	in the case of arrays don't use for in, use the standard for loop with limit

	6.63 Object.Create and Pure Prototypical Inheritance 
		- in javascript we should embrace the prototypal inheritance 
		- you simply create objects and create newer objects from those objects
		- What happens when you are working on project with legacy browser or project
			- Polyfill: Code that adds a feature which the engine may lack

	6.64 ES6 and Classes
		- a class in javascript is just syntactic sugar - its not changing anything, 

Chapter 7
	7.65 Odds and Ends	
		- Initializing json to begin project

	7.66 typeof, instanceof, and figuring out what something is
		- typeof tells us what type of thing it is
		- instanceof it tells us if any objects in prototype chain is found it comes back true

	7.67 Strict Mode 
		- Be more regimented and can help prevent errors under certain circumstances
		- "use strict"; - on top of file or function







