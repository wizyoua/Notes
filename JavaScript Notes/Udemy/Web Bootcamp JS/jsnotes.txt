JavaScript Functions

 - Understand why we use functions
 	- Lets us wrap bits of code up into reusable packages. They are one of the building blocks of JS

 	function hello() {
 		console.log("hello");
 	}

 - Arguments
 	- Functions that take inputs 

 	function hello(name) {
 		console.log("Hello" + name);
 	}

- Return Keyword
	- Often we want a function to send back an output value. If I use the return keyword the value comes back from the calculation of the function

	* function Declaration 
	function square (x) {
	return x * x;
	}
	square (4);

	- can also put the return result in a variable
	var result =  square(4)

	- return also stops the execution of the function

	* Function Expression
	
	var capitalize = function(str) {
	return str.cgarAt(0).toUpperCase() + str.slice(1);
	}


	*** Functions Problem Set

	function isEven (num) {
		return num % 2 === 0; 
	}

	isEven (3);

	function factorial(num) {
		if (num < 0) { return -1; }
		else if ( num == 0){return 1;}
 		else {
 			return (num *factorialize(num-1));
 		}
	}

	factorial(5);

	function kebabToSnake(str) {
		var newStr = str.replace(/-/g, "_");
		return newStr;
	}


	kebabtoSnake("Hello-world");


JavaScript Scope
	- When we create a function we create its own scope
	- When we define something outside the function we could still access it inside the function - but the opposite is not true


Higher Order Functions
	- Take a function as an argument or return a function

	function sing() {
		console.log("twinkle");
	}

	sing()

	//will call it every second - will give a number so you can stop the interval
	setInterval(sing, 1000);

JavaScript Arrays
	- Arrays let us group data together in lists. Array index always starts at 0

	var friends = ["g","s","b"]


	- Array Methods - Most popular ones

		1. push/pop - use push to add to the end of an array. Use Pop to remove the last item of an array
		
		2. Shift/unshift - Unshift to add to the front of an array. Shift to remove the first item in an array. Opposites of push and pop

		3. indexOf() - to find the index of an item in an array

		4. slice() - to copy part of an array

	- Array Iteration
		1. For Loop to loop over an array using a for loop, we need to make use of the array's length property.

		var colors= ["red", "blue", "green"];

		for(var i = 0; i < colors.length; i++) {
		console.log(colors[i]);
		}

		2. forEach - provides an easy built in way of iterating over an array (Most Common)

		var colors= ["red", "blue", "green"];

		colors.forEach(function(color){
			console.log(color);
		})


		*** Arrays Problem Set


		1. 
			function printReverse(arr) {
				for(var i = arr.length -1; i >=0; i--) {
				console.log(arr[i]);
				}
			}

			printReverse([3,6,2,5]);

		2. 

			isUniform([1,1,1,1,1]);

			function isUniform(arr){
				var firstItem = arr[0];
				for(i = 1; i < arr.length; i++){
					if(arr[i] !== firstItem){
					return false;
					}
				}
				return true;
			}

		3. 
			function sumArray(arr){
				var total = 0;
				arr.forEach(function(e){
					total += e;
				});
				return total;

			}

		4. 
			function max(arr){
				var max = arr[0];
				for(var i = 1 ; i<arr.length; i++) {
					if(arr[i]> max) {
						max = arr[i];
					}
				}
			}


	Building our own forEach (advanced but good learning)

	function myForEach(arr, func){
		//loop through array
		for(var i=0; i< arr.length; i++) {
			//call func for each item
			func(arr[i]);
		}
	}
	var colors = ["red","green","yellow"]
	
	//Anonymous function
	myForEach(colors,function(color){
		console.log(color);
	});

	//to make this like a forEach we have to add a method

	Array.prototype.myForEach = function(func){
		for(var i = 0; i < this.length; i++){
			func(this[i]);
		}
	}


JavaScript Objects

	- Nested Objects
		This is an array of posts with objects within the array
		var posts = [
			{
				title: "Cats are whatevs",
				author: "Gianni",
				comments: ["Awesome" , "Terrible"]
			},
			{
				title: "cats are cool",
				author: "Cat Lover",
				comments: ["whack" , "Terrible"]
			}
		]


		Problem 1

		Figure out which is valid
		
		var someObject = {};

		// choose true or false from below

		someObject._name = "name"; //True
		someObject.age = 6; //True
		
		var prop = "color";
		someObject[prop] = "red" //True

		someObject.123 = true; //False


		Problem 2

		Retrieve Malfoy from object

		var someObject = {
			friends: [
				{name: "malfoy"},
				{name: "name"},
				{name: "name"}
			],
			color: "blue",
			isEvil: true
		};


		someObject.friends[0].name



	- Movie Database Exercise

		var movArray = [
			{
				title: "movie1",
				hasWatched: true, 
				rating: 5
			},
			{
				title: "movie2",
				hasWatched: false, 
				rating: 4.5
			}
		]

		//loop through

		movArray.forEach(function(movie){
			var result = "You have ";
			if(movie.hasWatched) {
				result += "watched ";
			}else {
				result += "not seen ";
			}
			result += "\"" + movie.title + "\" - ";
			result += movie.rating + " stars";
			console.log(result);
		});

	- Adding Methods to objects

		-  Methods are just a function that is a property inside object

			var obj = {
				add: function (x,y){
					return x+y
				}
			}

			obj.add(10,5)

			* why do we add it inside object
				- helps keep code organized

	- The Keyword This

		var comments = {};

		comments.data = ["good job", "hi"];

		comments.print = function (){
			this.data.forEach(function(el){
				console.log(el);
			});
		}

		//this refers to the object comments

		comments.print(); //will bring back the array of comments


























