 Javascript Functions

 - Understand why we use functions
 	- Lets us wrap bits of code up into reusable packages. They are one of the building blocks of JS

 	function hello() {
 		console.log("hello");
 	}

 - Arguments
 	- Functions that take inputs 

 	function hello(name) {
 		console.log("Hello" + name);
 	}

- Return Keyword
	- Often we want a function to send back an output value. If I use the return keyword the value comes back from the calculation of the function

	* function Declaration 
	function square (x) {
	return x * x;
	}
	square (4);

	- can also put the return result in a variable
	var result =  square(4)

	- return also stops the execution of the function

	* Function Expression
	
	var capitalize = function(str) {
	return str.cgarAt(0).toUpperCase() + str.slice(1);
	}


	Functions Problem Set

	function isEven (num) {
		return num % 2 === 0; 
	}

	isEven (3);

	function factorial(num) {
		if (num < 0) { return -1; }
		else if ( num == 0){return 1;}
 		else {
 			return (num *factorialize(num-1));
 		}
	}

	factorial(5);

	function kebabToSnake(str) {
		var newStr = str.replace(/-/g, "_");
		return newStr;
	}


	kebabtoSnake("Hello-world");


JavaScript Scope
	- When we create a function we create its own scope
	- When we define something outside the function we could still access it inside the function - but the opposite is not true

	
