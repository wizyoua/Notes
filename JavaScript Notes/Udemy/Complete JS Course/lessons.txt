Section 3

	Lesson 27
		- Code goes to JS Engine (Parser -> Abstract Syntax tree. Conversion to machine code - > code runs)

	Lesson 28 
		- All js code needs to run in execution context. The global execution contect (code that is not inside of any function is gloabal, Assosiated with global object, in the browser this is the window object).

		- Each time we call a function it gets its own execution context. 
	Lesson 29
	- Execution Context in Detail
		1. Creation Phase
			- Creating of the variable object
			- creation of the scope chain
			- determine value of this
		2. Exection Phase
			- The code of the function that generated the current execution context is ran line by line. 

		//code example - Hoisting, in the creation phase of the execution function the function is stored in a var. 

			calculateAge(1990);

			function calculateAge(year){
				console.log(2016 - year);
			}

			//function expression, hoisting only works for function 
			declarations not expressions.
			
			var retirement = function(year){
				console.log(65 - (2016 - year));
			}

			//vars - become undefined.
			console.log(age);
			var age = 23;
			console.log(age);


			function foo() {
				var age = 65;
				console.log(age);
			}

			foo();
			console.log(age);

	Lesson 30
		- Scoping in JS
			- Each new function creates a scope
			- lexical scoping: a function that is inside another function gets access to parent function. 

	Lesson 31
		- Execution Stack is order in which functions are called
		- Scope Chain is order in which functions are written lexically

	Lesson 32-33
		// code example - understanding This

		calcukateAge(1985)
		function calculateAge(year){
			console.log(2016 - year);
			console.log(this);
		}










