https://www.youtube.com/watch?v=ZvbzSrg0afE&list=PLlasXeu85E9cQ32gLCvAvr9vNaUccPVNP&index=2&ab_channel=AkshaySaini

1. JS in the backend : Javascript is a synchrounous single-threaded language

(variable
enviroment)
Memory       |        Code 
key:value    |        thread of execution
fn: {}


2. What happens when you run js Code

drawiofile.
Call stack manages execution content in JS. EC has memory and code execution. Thats it
Call stack maintains the order of execution context:


3. Hoisting in JS
    - Functions are hoisted but not variables
    - functions and variables are stored in memory before execution so logging a variable before it is assigned will be undefined instead of error not found.
    

4. Functions: Understand execution context and call stack with the code below:

    var x = 1;
    a();
    b();
    console.log(x);

    function a(){
        var x = 10;
        console.log(x);
    }

    function b(){
        var x = 100;
        console.log(x);
    }


5. Shortest JS program:

    - an empty file because JS engine is still doing things behind the scenes.
    - JS creates a window even with a empty js file. 
        - window is a global object which is created along with the global execution context.
        - you can access any of the methods and vars anywhere in our js enviroment since it is global. 

    this  === window object

    - global space is just any variable or function  that is not inside a function.



7. Scope Chain

    function  a(){
        var b = 10;
        c();
        function c(){
            //c function is lexcically sitting inside a function
            console.log(b) // there is no b in c function memory so it goes to lexical enviroment of a. A has b so it will reference that b. 
        }
    }

    a();
    console.log(b) // error

    - whenever a execution context is created, a lexical environment is created. 

    - lexical environment is a collection of variables and functions that are scoped to a particular block of code.
    - lexical memory reference to parent environment which is just memory space but also to parent's parent. 
    - scope chain is a collection of lexical environments.


8. Let & const, temperal deadzones

    - let & const are hoisted very differently than var. let & const are stored in temporal deadzone
     
    console.log(b); // undefined (because of hoisting)
    console.log(a); // ERROR: (because of hoisting)

    let a = 10;
    var b = 100;

    JS has allocated memory to both a & b but the let a was allocated to a different memory space from global. You cannot access let & const memory until you have assigned a value to them.
    - temporal deadzone is a concept that JS engine uses to prevent access to variables that are not yet assigned. so its the time of when let was scanned and memory was allocated but until the point it gets assigned a value.
    - let & const are more strict than var. there will be no code execution until the syntax error is fixed. 
    - let vs const
        - cannot overide const 
        - syntax error for const is when a value is not assigned to const, but let allows us to just initialize 
        - let&const and cannot create duplicate variables


9. Block & Shadow- Scope 
- compound statement
- a block is used to combine multiple statements into a group. but why? so that we can use multiple statements where JS only expects 1 statement

{
    var a = 10;
    console.log(a);
}

//expects a single statement but it is a block of things to do. 
if (true) {
    var a = 10; // in global scope
    let b = 5; //in block object scope
    const c = 100; //in block object scope
};

- in the scope let & const are hoisted in a seperate memory space for this block. 
- var is stored in global scope vs let & const are in block scope 
- Shadowing in  js is when we have a variable with the same name in the same scope. 
- illegal shadowing: cannot declae a let or const outside of block then use var inside the block. because let already reserved the key. 

var a = 100;

{
    var a = 10;
    console.log(a);
}
console.log(a);

//output would be 10 for both logs on var
- for let and const we have different values for block scope and global scope.



10. Closures:

    function x(){
        var a = 7;
        function y(){
            console.log(a); // inside y function scope it binds the variables of x = closure. 
        }
        return y;
    }
    x();

    - closure is a function bundled with its lexical enviroment. 
    - In other words, a closure gives you access to an outer function's scope from an inner function
    - when a function is returned and assigned to var, if we later call var that was = to function, just like above let z = x(); then the scope of x is still there. 
    - so what is returned? the function + it's lexical scope

    - function along with it's lexical enviroment bundled together is called closure.

    - Uses of closures:
        Module Design Pattern
        Currying
        Functions like once
        memoize
        maintaing state in async world
        setTimeouts
        Iterators
        

11. Set Timeout + Closures
    - 
    - with var the console will print namaste js first,  then it will print i but i will be 6 on all of the settimeouts because it is refering to the i
    - with let, a new copy of i in each iteration is new and not the same referece that var was 
    - let is blocked scope unlike var so in each iteration the i would be a new i in memory
    function x(){ 
        //switch var with let below and the above makes sense
        for(var i = 1; i <= 5; i++){
            setTimeout(function(){
                console.log(i);
            }, i * 1000);
        }

        console.log('namaste js');
    }

    //solve the above without using let only using var in for loop
    - this will work with var because  everytime  we call close with i param it will be a new i.
     function x(){ 
        for(var i = 1; i <= 5; i++){
           function close(i){
            setTimeout(function(){
                console.log(i);
            }, i * 1000);
            }
            close(i);
        }
        console.log('namaste js');
    }

    x();


12. Good  example of closure to give interviewer


13. What is an anonymous function?
    - a function without a name.

    What is a first class function?
    - a function that can be passed as an argument to another function.



    //function statement aka function declaration
    function a(){
        console.log('a called');
    }
    a();

    //function expression - in many programming lanugages you cannot do function expression like in js. The major difference between this and function statement is that function expression is not hoisted. 
    var b = function(){
        console.log('b called');
    }
    b();

    //function declaration: same thing as function statement

    //anonymous function
    - function without a name. results in syntax error. the error even happens on initialization(the JS reading file phase) even before any code is ran. 
    - why do we use these: when functions are used as  values basically a function expression.
    function(){

    }
    //named function expression
    - function expression with a name. what is the gotcha? the xyz is not a global function it is still assigned to c.
    var c = function xyz(){
        console.log('c called');
    }
    //difference between parameteres & arguments
    - parameters are the variables that are passed into the function. arguments are the values that are passed into the function.
    function x(params){
        console.log(params);
    }
    x('arguments');

    // first class functions
    - functions can be passed as arguments to other functions.
    - we can also return a anonymous function from another function. 

    // arrow functions
    - arrow functions are a shorter way to write function expressions.


14. Callback functions? 


    // what is a callback function
        - due to callbacks we can do alot of async things
        - JS does not wait for callbacks to expire before moving on to the next line of code.

        setTimeout(function(){
            console.log('timer');
        }, 1000);

        function x(y){
            console.log('x');
        }
        x(function y(){
            console.log('y')
        });

        y is the callback function?
        - this y function is called later in the code

    // js is a synchronous and single-threaded language so it is important to understand that callback
    functions allow us to basically my js asynchronous.

    - Garbage collection & removeEventListener
        - garbage collection is a process that JS engine uses to remove unused memory.
        - event listeners are heavy, so we need to remove them when we are done with them.


15. Event loop - IMPORTANT!!


    web API's such as:
        - fetch
        - setTimeout
        - console
        - location 

    are not js but the  browser gives us access to those in the callstack
    Window. basically wraps everything from browser for us to be able to access.



    - so in last chapter the callback code, after 5 seconds the function will be put back into callstack here is the event loop:
    1. the timeout callback function is put into "callback queue"
    2. the event loop will run the callback queue and will put the functions of callback queue and put it into the callstack


    Why do we need a callback queue? 
        - because we need to run the code in the order that we want it to run. 


    important ex:

    console.log('start');

    setTimeout(function cb(){
        console.log(' cb timeout');
    }, 5000);

    fetch('https://jsonplaceholder.typicode.com/users')
    .then(function cbF(){
        console.log('cbF fetch');
    });

    console.log('end');

    Output:

    - microtask queue: same thing as callback queue but it has higher priority. So fetch callbacks functions are put into this queue instead of setTimeout for ex
    - once the callstack is  empty even from global execution, then the microtask queue will be run, then the callback queue will be run. 

    Microtask queue:
    - Promises and mutation observers are put into this queue.
    Callback Queue: 
    - all other callback functions are put into this queue.

    Starvation of callback queue is when microtask queues keep adding functions to itself thus delaying callback queue being run.


16.JS engine
    - Javascript Runtime enviroment

        1. JS engine
        2. API
        3. Event loop
        4. Callback queue

    - JS engine is the heart of the JS runtime enviroment.

    JS Engine Architecture:
        - first JS engine developed in the world? SpiderMonkey 

    3 steps in JS engine:

    1. Parsing State:
    JS basically extracts syntax and creates an entire tree.    
        - AST: Abstract Syntax Tree.

    2. Compilation State: 
        - JIT compilation is the process of using interpreter and compiler.
            - Interpreter: takes code and starts executing code line by line
            - Compiler: code is compiled and a new code is formed which is the optimized version of this code I.E. machine code. 

        JS can be either interpreted or compiled because it depends on the JS engine
            - JS is interpreted by default but today compiled code is the most popular.

    3. Execution:
        1. Memory Heap: this is where all the memory is stored. In sync with call stack and garbage collector.
        2. Call Stack : this is the call stack inside the runtime, inside the engine. Basically this is the high level picture how JS is executed behind the scenes.
        3. Garbage collector: tries to free up space whenever possible. Uses an algo, Mark & sweep algorithm which clears up memory.

    

17. Trust issue with setTimeouts
    - basically if we have any other functions running, then our callback functions stuck in callstack queue will be there until our "main thread" main callstack is empty, 
    then our event loop will check for Microtasks, then callback queue. Finally the code will be executed. This scenario doesn't really happen since JS runs insanely fast
    but it is important to know how it all works. 


18. Higher Order Functions
    - functions that take other functions as arguments or return a function.
    function x(){
        console.log('namaste');
    }

    function  y(x){
        x();
    }


    polyfill?

    // this will add calculate prop to all arrays
    Array.prototype.calculate = function(callback){
        var total = 0;
        for(var i = 0; i < this.length; i++){
            total += callback(this[i]);
        }
        return total;
     }

19.  Map, filter, reduce?
    - all 3 are higher order functions

    const arr = [5,1,3,2,6];

    // map : used when we want to tranform the entire array. Example below is doubling each element of the array
    const output = arr.map(function(num){
        return num * 2;
    });

    ||Or

    const output = arr.map(double);

    function double(x){
        return x * 2;
    }


    //filter: is used to filter the values inside the array. Example below filters our even numbers
    const output = arr.filter(function(num){
        return num % 2 === 0;
    });


    //reduce: is used to reduce the array to a single value. Example below sums all the elements of the array
    //acc represents the accumulator, so its basically like sum = sum + arr[i] in a traditional for loop. Like a var thats holding the accumulation
    //curr represents the current element
    const output = arr.reduce(function(acc, curr) {
        //acc is either passed in from previous iteration or 0 if its the first iteration. Notice the second argument in reduce function below.
        acc = acc + curr;

        //since we are returning here, notice how since we run this function against each el of an array, so on first iteration we do logic, then return the acc,  which then is passed into the next iteration on next el
        return acc;
    }, 0)


    const users = [
        {age: 26, firstName: 'John', lastName: 'Doe'},
        {age: 57, firstName: 'John', lastName: 'Doe'},
        {age: 70, firstName: 'John', lastName: 'Doe'},
        {age: 26, firstName: 'John', lastName: 'Doe'},
        {age: 12, firstName: 'John', lastName: 'Doe'},
    ];
    
    //map:
    const output = users.map( x => {
            return x.first + ' ' + x.last;
    })

    //reduce: lets find count of age numbers 
    const output = users.reduce(function(acc, curr){
        if(acc[curr.age]){
            acc[curr.age]++;
        }else {
            acc[curr.age] = 1;
        }
        
        return acc;
    },{});

