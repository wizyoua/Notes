What is JS?
	- Dynamic computer programming language. 
	- designed for creating network centric apps
Client Side JS
	- Less Server Interaction
	- Immediate feedback
	- Increased interactivity 
	- Rich interfaces
JS lacks
	- Cannot read or write files
	- JS cannot be used for network applications 
	- JS doesn't have multi threading or multiprocessor capabilities
JS Syntax
	- have to use <script></script> tags in web page
	- can place the script tags anywhere.
	- JS ignores Whitespace and line breaks
	- Semicolons are optional (but it is good practice to use them)
	- is Case Sensitive
	- Comments: //single line /*multi-line*/ <!--html comments also-->
JS in browser
	<noscript> will show that user's JS is not available and cannot access the page.</noscript>

JS Placement in html files
	- If you want to run JS on an event then include in head section (note this is for hard embed)
	- Run the script as the page loads then include the JS in the body section
	- include js files in the html page -> best option
JS Variables
	- Numbers, Strings, Booleans
	- variable = named container
	- ex: var name = "Gianni"; 
	- You can also name two variables at the same time. ex: var money,name;
	- When you declare variable like this -> var money; all you are doing is initializing it, so you can use it at a later point in time. 
	- Never! redeclare the same variable twice.
	- Global Vars = can be defined anywhere in your JS code
	- Local vars = visible within a function where is is defined. 
	- Local variables take precedence over a global variable with the same name
	- Never use JS reserved keywords as vars
	- Vars should not start with a numeral(0-9). if they do they always put an underscore. ex: var _1number = 1;
	- Vars are case sensitive;
JS Operator
	- + : addition
	- - : subtraction
	- * : multiplication
	- / : division
	- % : modulus
	- ++ : increment
	- -- : decrement
	- Comparison Operators
	- == : checks if the value of two operands are equal or not
	- != checks if the value of two operand are equal or not. Value not equal then the condition becomes true
	- > : checks to see if the value is greater than 
	- < : checks to see if the value is less than
	- >= : greater than or equal to
	- <= : less than or equal to
	- Logical Operators
	- && : (AND)
	- || : (OR)
	- ! : (NOT)
	- Miscellaneous Operators
	- conditional operator: first evaluates an expression for a true or false value then executes one of the two given statements depending upon the result of evaluation
	- ex: If condition is true? then value X: Otherwise value Y
	- Typeof: operator that is placed before its single operand which can be of any type. 
	- will evaluate is the variable is string, number, boolean, ect.
JS If else statement
	- is a conditional statement which is used to perform different actions based on different conditions. 
	- supports the following : if statement, if..else statement, if..else if.. statement
JS Switch Case 
	- switch statements which handles multi way branch. The objective of a switch statement is to give an expression to and evaluate several different statement to execute based on the value of expressions.
	- break statements will make sure the rest of the code does not get executed or else then every switch statement will be ran.
JS While Loops
	- purpose of while loop is to execute a piece of code as long as the expression is true
	- once the expression becomes false, the loop terminates
	- do while loop: condition check happens at the end of the loop: means that loop will be executed at least once even if the condition is false
	- keeps doing the do loop until while conditions are met. So say if i did loop from 0 to 5 then then once number reaches 5 the loop will stop.
JS For Loops
	- Loop initialization: where we initialize our counter to a starting value. 
	- test statement: which will test the condition if it is true or not. if the condition is true, then the code inside the loop will be executed.
	- the iteration statement, which will increase or decrease the counter
	- All this happens in the FOR loop
	- ex: for (initialization; test statement; iteration statement){...}
	- Careful: if your condition never ends, you will have infinite loop which will break your browser
JS For..in loop
	- used to loop through an objects property
	- ex: for (variablename in object){...}
JS Loop Control
	- break: used to exit a loop early, breaking our of the enclosing curly braces
	- continue: tells interpreter to start the next iteration of the loop and skip the remaining code block.
JS Functions
	- function: a group of reusable code which can be called anywhere in your program. Eliminates the need of writing the same code over and over again.
	- define a function: function name(parameters){...} in your script
	- call a function in html by writing the name of that function.
	- function parameters: passed parameters can be captured inside the function and any manipulation can be done over those parameters.
	- return: required if you want to return a value from a function
JS Events
	- JS interaction with html is handled through events that occur when the user of the browser manipulates a page.
	- onsubmit event type: event that occurs then you try to submit a form. you can put a form validation against this event type.
	- onmouseover and onmouseout: these to event types will help create nice effects with images or even text. 
JS Cookies
	- using cookies is the most efficient method of remembering and tracking preferences, purchases, ect.
	How does it work?
		1. Server sends some data to the visitors browser in the form of a cookie.
		2. The browser may accept the cookie, and if it does it is stored as a plain text record on the visitors hard drive.
		3. When the visitor arrives at another page on the site, the browser sends the same cookies to the server for retrieval
	- Cookies: are plain text data record of 5 variable-length fields
		1. Expires - date the cookie will expire
		2. Domain - domain of site
		3. Path - path to directory or webpage that set the cookie.
		4. Secure - cookie may only be retrieved with a a secure server
		5. Name=Value - cookies are set and retrieved in the form of key-value pairs
	- Storing Cookies: document.cookie = "key1=value; key2=value2;expires=date";
JS Page Redirect
	- will allow you to send your visitors to another page if necessary
JS Void Keyword
	- important keyword in JS which can be used as a operator that appears before its single operand.


JAVASCRIPT OBJECTS
JS Objects
	- JS is a OOP language, which has to have: 
		1. Encapsulation: the capability to store related information, whether data or methods, together in an object.
		2. Aggregation: ability to store one object inside another object.
		3. inheritance: ability of a class to rely upon another class for some of its properties and methods.
		4. polymorphism: ability to write one function or method that works in a variety of ways.
	- Object Properties: usually variables that are used internally in the objects methods, but can also be globally visible that are used throughout the page.
		- var str = document.title;  || objectName.objectProperty = propertyValue;
	- Object Methods: are the functions that led the object do something or let something be done to it. Small difference between method and functions, function is a standalone unit of statements but a method is attached to an object and can be reference by THIS keyword.
	- User-defined objects: basically descendants of an object called Object. New operator creates an instance of an object.
	- With keyword: used as a kind of shorthand for referencing an object's properties or methods
JS Different Objects
	- Number object: a numerical date, either integers or floating-point number. (don't worry about number objects because browser automatically converts them)
	- Boolean object: two values, either "true" or "false"
	- String object: series of characters
	- Arrays object: allows you to store multiple values in a single variable. 
	- Date object: datatype built into the JS language
	- Math object: provides properties and methods for mathematical constants and functions.




Understanding This
	- 4 ways that "this" takes a value
		1. in normal function calls
		2. within methods on object
		3. within an object that has been constructed
		4. function invoked with .call,.bind

	