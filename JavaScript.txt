What is JS?
	- Dynamic computer programming language. 
	- designed for creating network centric apps
Client Side JS
	- Less Server Interaction
	- Immediate feedback
	- Increased interactivity 
	- Rich interfaces
JS lacks
	- Cannot read or write files
	- JS cannot be used for network applications 
	- JS doesn't have multi threading or multiprocessor capabilities
Syntax
	- have to use <script></script> tags in webpage
	- can place the script tags anywhere.
	- JS ignores Whitespace and line breaks
	- Semicolons are optional (but it is good practice to use them)
	- is Case Sensitive
	- Comments: //single line /*multi-line*/ <!--html comments also-->
JS in browser
	<noscript> will show that user's JS is not available and cannot access the page.</noscript>

JS placement in html files
	- If you want to run JS on an event then include in head section (note this is for hard embed)
	- Run the script as the page loads then include the JS in the body section
	- include js files in the html page -> best option
Javascript Variables
	- Numbers, Strings, Booleans
	- variable = named container
	- ex: var name = "Gianni"; 
	- You can also name two variables at the same time. ex: var money,name;
	- When you declare variable like this -> var money; all you are doing is initializing it, so you can use it at a later point in time. 
	- Never! redeclare the same variable twice.
	- Global Vars = can be defined anywhere in your JS code
	- Local vars = visible within a function where is is defined. 
	- Local variables take precedence over a global variable with the same name
	- Never use JS reserved keywords as vars
	- Vars should not start with a numeral(0-9). if they do they always put an underscore. ex: var _1number = 1;
	- Vars are case sensitive;
JS operator
	- + : addition
	- - : subtraction
	- * : multiplication
	- / : division
	- % : modulus
	- ++ : increment
	- -- : decrement
	- Comparison Operators
	- == : checks if the value of two operands are equal or not
	- != checks if the value of two operand are equal or not. Value not equal then the condition becomes true
	- > : checks to see if the value is greater than 
	- < : checks to see if the value is less than
	- >= : greater than or equal to
	- <= : less than or equal to
	- Logical Operators
	- && : (AND)
	- || : (OR)
	- ! : (NOT)
	- Miscellaneous Operators
	- conditional operator: first evaluates an expression for a true or false value then executes one of the two given statements depending upon the result of evaluation
	- ex: If condition is true? then value X: Otherwise value Y
	- Typeof: operator that is placed before its single operand which can be of any type. 
	- will evaluate is the variable is string, number, boolean, ect.
JS If else statement
	- is a conditional statement which is used to perform different actions based on different conditions. 
	- supports the following : if statement, if..else statement, if..else if.. statement
JS switch Case 
	- switch statements which handles multi way branch. The objective of a switch statement is to give an expression to and evaluate several different statement to execute based on the value of expressions.
	- break statements will make sure the rest of the code does not get executed or else then every switch statement will be ran.
JS While Loops
	- purpose of while loop is to execute a piece of code as long as the expression is true
	- once the expression becomes false, the loop terminates
	- do while loop: condition check happens at the end of the loop: means that loop will be executed at least once even if the condition is false
	- keeps doing the do loop until while conditions are met. So say if i did loop from 0 to 5 then then once number reaches 5 the loop will stop.
JS for Loops
	- Loop initialization: where we initialize our counter to a starting value. 
	- test statement: which will test the condition if it is true or not. if the condition is true, then the code inside the loop will be executed.
	- the iteration statement, which will increase or decrease the counter
	- All this happens in the FOR loop
	- ex: for (initialization; test statement; iteration statement){...}
	- Careful: if your condition never ends, you will have infinite loop which will break your browser
JS for..in loop
	- used to loop through an objects property
	- ex: for (variablename in object){...}
	

