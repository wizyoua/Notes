Angular helps:
 1. organize your JavaScript
 2. create responsive websites
 3. plays well with jQuery
 4. easy to test

Directives: Marker on HTML tag that tells Angular to run or reference some JavaScript code.


Modules:
	1. Where we write pieces of our Angular application.
	2. Makes our code more maintainable, testable and readable.
	3. Where we define dependencies for our app.
		- modules can use the same module

Expressions: 
	- Allow you to insert dynamic values into your HTML

Controllers: where we define our app's behavior by defining functions and values.
	- wrapping your JS in a closure is good habit!
	- Controller is attached to (inside) our app.

Built in Directives:
	1. 
	2. ng-hide/ ng-show: display a section base on an Expression.
	3. ng-repeat: repeat a section for each item in an Array
	4. ng-app: attach the apps module to the page
	5. ng-controller: attach a controller function to the page.


What we have learned so far:
	1. Directives - HTML annotations that trigger JavaScript behaviors 
	2. Modules - Where our application components live
	3. Controllers - Where we add application behavior
	4. Expressions - How values get displayed within the page

Tabs inside out
	1. ng-click="tab = 1" - assigning a value to the tab

	When ng-click changes the value of tab ...
	the {{tab}} expression automatically gets updated

	Expressions define a 2-way Data Binding 
	this means expressions are re-evaluated when a property changes. 

Setting the Initial Value
	ng-init allows us to evaluate an expression in the current scope.


	ng-submit - allows to call a function when user clicks submit -> define it in controller
	ng-model - binds the form element value to the property
Form Validations
	1. HTMl novalidate
	2. {{reviewForm.$valid}} reviewForm is the name of the form.
	3. ng-submit="reviewForm.$valid && reviewCtrl.addReview(product)" - will only work to submit once form is valid, will then run the addReview


Directives - can help declutter html
	1. Can take out repetitive.
	2. Transfer a snippet of html over to a new file->use ng-include=“’product-title.html’” inside tag of course to bring that code snippet back in. have to use single quotes as well because if not, angular is expecting a variable instead of the actual file. 

	3. Why Directives? - allow you to write html that expresses the behavior of your application

	Template -Expanding Directives are the simplest:
		- Define a custom tag or attribute that is expanded or replaced
		- can include Controller logic
	Directives can also be used for:
		-Expressing complex UI
		-Calling events and registering event handlers
		- Reusing common components.
		- Element Directive: <product-title></product-title>
		- Attribute Directive: <h3 product-title></h3> - have to define in app.directive - > restrict: ‘A’
	Use Element Directives for UI Widgets and Attribute Directives for mixing behaviors like tooltip?!?!

Dependencies
	How should i organize my application module?
		- app.js top-level module attached via ng-app
		- products.js all the functionality for products and only prodoucts
Services

	- Gives your controller additional functionality like:
		- Fetching JSON data from a web service with $http
		- Logging messages to the Javascript console with $log
		- Filtering an array with $filter
	$http service: using $http as a function with an options object

	3 Types of services:
		- Factory: create and object, add properties to it, return that same object
		- Service: is instantiated with a new keyword. yo would add properties to 'this' and the service will return 'this'.


Routes
	- keep things encapsulated and bite size
	- take pieces of unique code and separate them into their own files
	Defining a Route: allow us to map url's to use templates so that every time the current route changes, the included view changes with it. 

	4 steps to using routes:
		1. using ng-view
		2. loading the ngROute library - they put routing in a separate module. You need to explicitly import ngRoute in your application.
		3. importing ngRoute module - We need to include ngRoute in our main app module so our whole app will have access to this service.
		4. Defining routes
			! don't create var app = angular.module because it is bad practice.
		Use the Otherwise method to define a route be used when no other route definition is matched.


		Otherwise() only takes object not like the .when() routes

$http  methods
	$http.put() - used for updating existing data
	$http.get() - used for retrieving data

	// Will post to the server
		.when('/notes/new', {
			templateUrl: 'templates/pages/notes/edit.html'
		})


	- We can gain access to the note's id in the following URL: http://example.com/#/notes/42 by injecting the  $routeParams service into the NotesShowController.

Logic in out Routes
	$http Service Distilled
	 	- $http.get : retrieve data
	 	- $http.post : create new data
	 	- $http.put : update existing data
	 	- $http.delete : destroy data

	- Not only can routes have templates bu they can also have their own associated controllers

