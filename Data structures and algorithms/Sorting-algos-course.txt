NullPointer Exception Youtube series: https://www.youtube.com/watch?v=i4hoyD4hUcg

- What is is a sorting algorithm
    - A function used to rearrange a given array or list of elements
    according to a comparison operator on the elements.
    - Data
        - collection of info stored ina similar location such ass array
        - will always be in the form of

    - 2 states data can be
        1. sorted: data is sorted by some order
        2. unsorted: data is not in any particular order


- Why do we need to sort lists:
    - having a sorted list allows you to gain a lot more from the data that you would otherwise

    - Unsorted data: linear search method
    - Sorted data: Binary search (much more efficient)

1. Comparison sorts:
    - sort a set of data by continually comparing the elements near each other in the list, and swapping if necessary.
        1. selection sort
        2. odd-even sort
        3. bubble sort
        4. cocktail-shaker sort
        5. quicksort
        6. Bitonic sort
        7. Heap sort
        8. Cycle sort

2. Insertion Sorts:
    - go through list of elements and slowly build the sorted list one element at a time.
        1. Insertion sort
        2. Shell sort

3. Merge sort: recursive sorting algo
4. Bucket sort: counting sort
5. Comb sort: exchange sort



- Selection Sort:
    - a simple, in place, comparison-based, unstable, sorting algorithm which slowly builds an unsorted list into a sorted list by 
    repeatedly searching for the smallest value, and placing it in it's correct location.

    - in-place:
        - an algorithm in which we sort the list without any extraneous memory.
    - unstable algorithm : an algo in which the order amongst duplicate elements is not preserved
    - stable algo: order is kept amongst duplicates. 
    
    - how to structure:
        1 issue 3 new variables: 
            1. Counter:
            2. TRaversing Index
            3. Minimum Index

        2 Set Counter equal to 0, Minimum Index equal to counter, and Traversing index equal to 1 plus the counter
        3 Search the list from the counter through the end of the data using our Traversing Index, and compare every element we pass over to the value stored at the minimum index.
            3a if the value is less than the value stores at the minimum index, we re set minimum index to whatever our traversing index is
        4 After traversing the whole list, we swap the values counting at the Counter and the minimum index
        5 Increase the counter by 1, set the minimum index equal to the Counter, and set the Traversingindex equal to 1 plus the counter
        6 repeat steps 3-5 until you have sorted list

    Time Complexity: O(n^2)
    Space Complexity: O(1)

    function selectionSort(inputArr) { 
    let n = inputArr.length;
        
    for(let i = 0; i < n; i++) {
        // Finding the smallest number in the subarray
        let min = i;
        for(let j = i+1; j < n; j++){
            if(inputArr[j] < inputArr[min]) {
                min=j; 
            }
         }
         if (min != i) {
             // Swapping the elements
             let tmp = inputArr[i]; 
             inputArr[i] = inputArr[min];
             inputArr[min] = tmp;      
        }
    }
    return inputArr;
}



- Bubble Sort
    - simple in place, comparison based, stable sorting algorithm which repeatedly steps through an unsorted lists, compares adjacent elements
    and swaps them if they are in the wrong order. 
    - repeated until the list is sorted.

    Time Complexity:  O(n) - best case, O(n^2) average and worst case
    Space Complexity: O(1)

    // Bubble sort Implementation using Javascript
  
  
// Creating the bblSort function
 function bblSort(arr){
     
 for(var i = 0; i < arr.length; i++){
     
   // Last i elements are already in place  
   for(var j = 0; j < ( arr.length - i -1 ); j++){
       
     // Checking if the item at present iteration 
     // is greater than the next iteration
     if(arr[j] > arr[j+1]){
         
       // If the condition is true then swap them
       var temp = arr[j]
       arr[j] = arr[j + 1]
       arr[j+1] = temp
     }
   }
 }
 // Print the sorted array
 console.log(arr);
}
  
  
// This is our unsorted array
var arr = [234, 43, 55, 63,  5, 6, 235, 547];
  
  
// Now pass this array to the bblSort() function
bblSort(arr);



    - Cocktail-shaker Sort:
        - bubblesort -> cocktail-shaker sort
        - variation of bubble sort which traverses a list of elements both forwards and backwards as opposed to just forwards and swaps values as needed.

    Time Complexity: O(n) best, O(n^2) average and worst
    Space Complexity: O(1)

    Code: 
    function cocktailSort(arr) {
        //Start and end is used to keep track of where the beginning and the end of the array is at
        //to determine where needs to be checked for sorting
        //Swapped is our conditional to check if everything is sorted
        let start = 0, end = arr.length, swapped = true;

        while (swapped) {
            //Setting the flag to false, in case it is true from the previous iteration
            swapped = false;

            //Bubble sort from the left side of the array to the right, moving the largest.
            for (let i = start; i < end - 1; i++)
            {
                if (arr[i] > arr[i+1]) {
                    let temp = arr[i];
                    arr[i] = arr[i+1];
                    arr[i+1] = temp;
                    swapped = true;
                }
            }

            //This is to update the end, so that next iteration, we don't have to check this index.
            end--;

            //If everything is already sorted, we can break out of the loop early.
            if (!swapped)
            {
                break;
            }

            //Setting the flag to false, so it can be used for the next phase
            swapped = false;

            //Reverse Bubble sort, moving the smallest to the front.
            for (let i = end - 1; i > start; i--)
            {
                if (arr[i - 1] > arr[i])
                {
                    let temp = arr[i];
                    arr[i] = arr[i - 1];
                    arr[i - 1] = temp;
                    swapped = true;
                }
            }

            //This is to update the beginning, so that next iteration, we don't have to check this index.
            start++;
        }

        return arr;
    }


    - Odd-even sort
        - variation of bubble-sort which sorts a list through 2 phases, an odd phase and an even phase
            - during the Odd Phase we perform a bubble sort on odd-indexed elements
            - during the  Even Phase we perform a bubble sort on even-indexed elements.
        Time Complexity: O(n) best O(n^2) average and worst
        Space Complexity: O(1)
        