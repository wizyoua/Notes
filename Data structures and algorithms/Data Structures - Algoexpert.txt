Data Structures Algoexpert

1. What are Data Structures:
    - manipulate data involves structuring data and managing data
    - is a collection of data values, relationships among them, the functions that can be applied to the data.


2. Complexity Analysis:
    - better undertstanding DS with it, it is the bedrock of coding interview problems
    - Coding problems can have multiple solutions, we try to figure out the best complexity Analysis
    - solutions are all different, some solutions are better than other.
    - Time complexity: (high level overview) measure of how fast and algo runs
    - Space complexity:  measure of how much memory/space an algo uses up
    - different DS will have different Time and Space Complexity

3. Memory:
    - memory analogy: a canvas where we have a litte slots like a table with squares that are numbered, pretend each number is a memory slots
    - 1 Memory slot can hold 8 bits = 1 Byte
    - 
    - Bit: short for binary digit, a bit is a fundamental unit of information in Comp Sci that represents a state with one of two values, typically 0 and 1
    - Byte: 
4. Big O Notation:
    - Time Complexity : the measure of an algo speed as the size of the input increases.
    - It's impossible to describe the time complexity in milliseconds that is why we measure in a different way 
    - We see why we test time complexity with the size of the input, because some algos can run fast as you increase size but others will obviously take forever
    - O(1) constant:  means that as size of input increases, time stays constant
    - O(n) : size of input(n) increases, the speed of the algo increase linearly
    - O(n^2) : 

    - Big O notation you should read it as asymptotic measure of our algo
    - accessing a value to a direct memory slot would take constant time
    - in Order:
        1. O(1)
        2. O(log(n))
        3. O(N)
        4. O(N log(n))
        5. O(n^2)
        6. O(2^n)
        7. O(N!)

    - Big O notation refers to time or space complexity in the worst case scenario


5. Logarithm: 
    - mathematical concept widely used in comp sci and that's defined by the following equation:
    logb(x) = y if and only if b^y = x 
    - log(n) is a great complexity compared to O(n) since the more data, the n only increases just a little Bit
    instead of increasing a lot linearly

6. Arrays: 
    - There are 2 types of arrays
    - Static arrays: like in java/c++ you have to specify the array size so your OS can find the correct allocation in memory for that array.
        common operations for Arrays:
            - Accessing: 
                - Time Complexity: O(1) Space Complexity: O(1)
                - read a value at given index: array[2], doing a lookup by direct index is constant time O(1)
            - Set/Overriding: 
                - Time O(1) Space O(1)
                - array[2] = 5 - overwriting value at index
            - Creating array:
                - Time O(N) Space O(N)
                - OS goes into memory and finds slots to store fixed array
            - Traversing Array:
                - Time O(N) Space O(1)
                - JS built in array methods like map, filter are all O(N)
            - Copy Array:
                - Time(N) Space O(N)
                - very important because when solving solutions, like .slice() and for example in for loop, so you are copying array in for loop. 
            - Inserting Value in Static Array:
                - Time O(N) Space O(1) - because space your find new memory slots and free up old memory slots
                - very slow operation since static means we assigned space but now it needs to find a new space in memory since you are inserting into array
                - under the hood you copy the array

    - Dynamic arrays: is an array that can change in size. How it works under the hood, in JS and Python dynamic arrays are standard, but in C++ or Java they are vectors or array lists
        - allows you to have faster insertions at the end of the array.
        - will allocate double the array you need, once you exhaust allocated extra space, it will copy itself and double the amount of free space you need.
        - Time: O(1) :why? because every time we double the memory, 
        - Space: O(1) : should we specify the worst case? O(n) if you insert in middle of array because you are shifting every element by 1

7. Linked Lists:
    - Time get: O(i) where i is the index 
    - Space: O(1)
    - setting: O(i) , O(1)
    - we don't really set things in linked lists, you dont think of nodes at a given index.
    - initializing linked list : 
        - Time: O(N)
        - Space: O(N)
    - Copying: 
        - Time: O(N)
        - Space: O(N)
    - Traverse: 
        - Time: O(N)
        - Space: O(1)
    - Insertion: 
        - O(1) if you have head/tail 
        - O(N) if you don't have tail

    - Doubly linked list is same just every node has pointer to previous node
    - you can make linked list circular as well
    - 

8. Hash Tables
    - a DS that provides fsat insertion, deletion, and lookup of key/value pairs
    - in JS this is an object, in python this is a dictionary
    - Time complexity: on average
        - Insertion: O(1)
        - Delete : O(1)
        - Search: O(1)
        BUT!!
        there are worst cases when TC can be O(N) in worst case
        - how do you differentiate?
            - well hash tables implementation minimize the number of collisions so we stay constant time
            - Only case O(N) for hash table. interview specify you need to have constant time
    - under the hood a has table uses a dynamic array of linked lists to efficiently store key/value pairs
    - under the hood, the hash function transforms your key into an index which will fit into the underlying array
    - in order to handle underlying array is too small, you can implement hash table to resize. this is mostly complicated
    - initializing : O(N)
    - storing : O(N)
    
9. Stacks and Queues
    - Stack : an array-like data structure whose elements follow the LIFO Principle
        - Pushing onto stack : O(1)
        - popping from stack : O(1)
        - peeking at element at top of stack : O(1)
        - Searching in a stack: O(N);

    - Queues: an array like DS whose elements follow the FIFO Principle
    
    - Both DS support
        - Insertion: O(1)
    - a stack is a dynamic array under the hood
    - 
10. Strings 
    - a string is typically stored in memory as an array of integers. its done by encoding standt like ASCII say A => 65, b => 66 then you just store into memory.
    - Traversing through string - Time:O(N) Space:O(1)
    - copy Time:O(N) Space: O(N)
    - get Time:O(1) Space: O(1) 
    - in some languages you can't alter strings, you have to copy string so you apply complexity to it.
    - in Javascript strings are immutable. so if you are adding or any mutation it is always O(N)

11. Graphs
    - 


