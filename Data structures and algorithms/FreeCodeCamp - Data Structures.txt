FreeCodeCamp - Data Structures - Computer Science Course for Beginners - https://www.youtube.com/watch?v=zg9ih6SVACc&ab_channel=freeCodeCamp.org

What is Big O notation: 
    - A way to basically score a data Structure based on 4 criteria
    - the most common functions you might want from a data Structure
     1. Accessing elements
     2. searching for an element
     3. Inserting an element
     4. Deleting an element

    - A time complexity equation works by inserting the size of the data-set as an integer N, and returning the number of operations
    that need to be conducted by the computer before the function can finish.

    - we always use worst case scenario when judging these data Structure

    - its called bigO notation because the syntax for the Time complexity equation includes a bigO and then a set of parentheses
        - the parentheses houses the function

    - We measure efficiency in # of operations performed because measuring by how long the function takes to run would be silly
        - Accessing
        - searching
        - inserting
        - Deleting
        - modeled by equation which takes in size of data-set and returns number of operations needed to be performed by the computer to complete that takes

    - A data Structure efficiency isn't the end all be all for deciding on which data Structure to implement. 

    6 most common time complexity equations - numbered below best to worst

    1. 0(1) 
        - no matter what the size of your data set is, the task will be completed in a single instruction.
        - graph of 0(1) remains constant at 1 - no matter the volume of data, the computer will complete task in single instruction

    2. 0(log n)
        - Still provides fast completion time.
        - gets more efficient as the size of the data set increases.
        -ex. Binary Search

    3. 0(n) 
        - the last of the decent equations
        - 

    4. 0(n log n)
        - the first which is relatively bad in terms of efficient.
        - slope increases as volume of data increases

    5. O(n^2)
        - very bad in efficiency
    
    6. O(2^n)
        - exponential in Structure

    Data Structures

    1. Array
        - most common data structure
        - fundamentally a list of similar values
        - can be used to store anything
        - store values of the same type
        - every item in the list of data is referred to as an element

        - there are also examples of parallel arrays
            - contain the same number of elements
            - have corresponding value in the same position

        - the arrays type
        - what type of info is stored or will be stored in the arrays
        - the size is a set integer that is fixed upon creation of the array
        - there are 2 ways to create an array in most languages
            - populate first
            - populate later   

        - to get info that is stored within the array, we use a numerical index. an integer which corresponds to an element within the array
        - an array within an array is known as 2 dimensional array

        - Array as a Data Structure Big O reference: 
            - Accessing array: O(1) - 
            - Searching array: O(n) - because most of time we are working with unsorted lists.
            - Inserting array: O(n) - because adding element into array requires you to shift every element thats after the index you are inserting to the right one space
            - Deleting array: O(n) - because removing element from array will shit everything to the left one space.
    
    2. ArrayList
        - the arrayList can be thought of as a growing array
        - why not always use arraylist?
            - 
        - arraylist is backed by array in memory
        - in python or js a array and arrayList are basically merged together, the example while learning this shows it in Java and C#
        - arrayList is an evolved array
        - arraylist belongs to class so it has pre built functions
        - type of functionality varies based on language
        - 6 common methods of ArrayList:
            - Add method
            - Remove method
            - Get method
            - Set method
            - Clear method
            - toArray method
        - Accessing : O(1)
        - Searching : O(n)
        - Inserting : O(n)
        - Deleting : O(n)

        Why not always use arrayList since it's more efficient:
            - arrayLists can only store objects

        Summary from this is not really applicable because in JS Pythong and PHP an array is basically an ArrayList 
    
    Random Access vs Sequential Data Structures
    - is a Sequential Access Data Structures
    - Do not provide O(1) Accessing
    - Can only be accessed in a particular order
    - Each element is dependent on the others
    - may only be obtained through those elements
    
    3. The Stack 
        - a Sequential access data structure in which we add elements and remove elements according to the LIFO Principle
        - Last In First Out
        - like grabbing a book 3 books below from the top, we can only access by removing the top 2 books
        - Common Stack methods
        
        - Push method 
            - pushes an object onto the top of the stack
            
        - Pop method
            - remove an element from the top of the stack

        - Peek method
            - Allows you to get the value at the top of the list without removing it

        - Contain method
            - used for searching through the Stack
        
        Time Complexity:

        Accessing : O(n)

        Searching : O(n)

        Inserting : O(1) since data only flows from single point, its pretty fast to access the immediate item same for deleting

        Deleting : O(1)

        - Stacks are used everywhere, both in code and real-world situations

        HEY!! a great example is recursion, since it is the process of function repeadetly calling themselves
        that means every time it runs, it keeps stacking the method runs, but then once it reaches base case, it 
        will pop the calls of. 

        real world situations are like undo/redo or backpage in browser. 

    4. The Queue
        - a Sequential access data structure which follows the FIFO methodology
            - FIrst in First Out
        - The location we add and remove elements in the Queue
            - add in the backed: tail
            - remove from the front: head
        
        Queue methods:
            - Enqueue
                - Add an element to the tail of the Queue
            
            - Dequeue 
                - Removes an element from the head of queue
            
            - Peek
                - returns the object thats at the forefront of the queue
            
            - Contains
                - returns wether or not the queue contains an object

        Time complexity: 
            Accessing : O(n)
            Searching : O(n)
            Inserting : O(n)
            Deleting : O(n)    

        Uses: 
            - used very often in programming for a variety of functions

    5. The Linkedlist
        - Sequential access linear data structure in  which every element is a seperate object called a Node which has 2 parts
            - The data
            - the reference(or pointer) which points to the next Node in the list
        
        Visualizartion


        Look how the starting node has data, and is null is no other node is added, but then if one is added the node 1 pointer points to 2
        and the newest node 2 has its data but then the pointer is null, and so on.
        
        (head node - arbitrary)
        Data:1
        Pointer: 2

        (Tail Node)
        Data:2
        Pointer:null
        
        - every node has information and a pointer

        How to add and remove from a linked list, not as simple as stack or queue.

        - Data can flow in and out from any point
            - Adding to the head of Linkedlist
            Make the new Node pointer point to the current Head of the Linkedlist

            - Removing from the Head of a Linkedlist
                - Set the Head Nodes pointer to null value, it will remove it. 
                - old head node regains its position

            - Adding a Node to the middle of a Linkedlist
                - Make the pointer of the new Node point to the Node after the location we want to insert at
                - Set the Node before the location we want to insert at to point towards the new Node

            - Removing a Node from the middle of the Linkedlist
                - Make the pointer of the Node previous to the one we're removing, to now point to the Node after the one we're removing.

            - Adding to the tail of a Linkedlist
                - Make the current tail point towards the new Node you want to add.
            
            - Removing from the Tail of a Linkedlist
                - Set the previous tail to point towards a null value instead of the current tail

        Time Complexity for Linked ListL:

        Accessing : O(n) - we can't get any element we want instantaneously

        Searching : O(n) - check a node and if not we want, we use the pointer to check next one, or null

        Inserting : O(1) - when inserting to head or tail 
                    O(n) - when inserting in middle of the list

        Deleting  : O(1) - when inserting to head or tail 
                    O(n) - when inserting in middle of the list

        Real world applications:
            - linkedlist can be used in the backing of other data Structures
            - can use it to make Stacks, Queue, etc. - really important in comp sci
            - Spotify queue
            - image viewing software
        
        - One big drawback, we can only point forward. it is fixed by using dubly linked list
    
    6. Doubly-linkedlist
        - Sequential access data structure
        - able to traverse both forwards and backwards using pointers
        
        Visualization:

        Previous Pointer: Null
        Data : '1'
        Next Pointer: 2

        Previous Pointer: 1
        Data : '2'
        Next Pointer: 3

        Previous Pointer: 2
        Data : '3'
        Next Pointer: null

        - Adding to the Head of a doubly linkedlist
            - set the new Nodes next to point towards the current head of the list
            - Take the new node that we want to insert, and set it's previous to null
            - Set the current head's previous to point towards this new node

        - Removing from the Head of a doubly linkedlist
            - Set the head Nodes next to point towards a null value
            - Set the second Node's previous to also point towards a null value

        - Adding to the middle of list
            - Set the new Node's previous to point towards the Node previous to the position you want to insert at
            -  Set the new Node's next to point towards the Node after the position you want to insert at
            -  set the next and previous on the Node's before and after the one you're inserting to point towards the new node. 

        - Removing from the middle of the list
            - Set the Node before the one we want to remove next to point towards the Node after the one we want to remove
            - Set the Node after the one we want to remove previous to point towards the Node before the one we want to remove
            - Set both pointers of the Node we want to remove to point towards a null value

        - Adding to the tail of the list
            - Set the next pointer of the current tail to point towards the new Node we want to become the tail
            - Set the previous of the new Node that we're adding to be pointing towards the current tail of the list
            - Make the new Node's next point towards a Null value

        - removing from the tail of the list
            - Set the tail Node's previous to point towards null
            - Set the second to last Node's next to also point towards null
        
        Time Complexity:

        Accessing : O(n)

        Searching : O(n)

        Inserting : O(n) if middle
                    O(1) if head or tail
        
        Deleting : O(n) if middle
                    O(1) if head or tail
    
        Real world Uses
            - the back and forth functionality of a doubly linked list lends itself to be implemented in a lot of Stack-like functionality
            - browser caches going back forth in pages
    
    7. Dictionaries
        - One of the most abstract data Structures 
            - both are called Maps and Associative array
            - an abstract data structure which stores data in the form of key/value pairs
            - We index Dictionaries using these keys instead of a numerical index
            - they keys in a key value pair can be any primitive data type you can think of
            - every key has to be unique
            - each key can only have one pair
        - 2 important restrictions
            - any key can only appear once 
            - each key can only have one value

    8. Hash Table - mini lesson
        - Hash tables are fundamentally a way to store this information in such a way that 
        we're able to cut down the amount of nil values while also allowing for the information 
        to be stores in a way that is easily accessible
        
        - Hash function will take all the keys for a given dictionary and strategically map them to certain index locations in an 
        array so that they can eventually be retrieved easily. 
        
        - the goal of a good hashing function is to take in a key and reliably place it somewhere in the table so that in can be accessed
        by the computer

        Time Complexity: its a bit funky since dictionary is built on hash table
            - When it comes to Dictionaries, we measure time complexity
        - Accessing : 0(1)
        - Searching : 0(1)
        - Inserting : O(1)
        - Deleting  : 0(1)

        - the option for non-numerical indexes
        - the flexibility when it comes to making keys
        - they speed which comes with the hash table implementation


    9.  Trees 
        - store data hierarchically as opposed to linearly
        - an abstract data structure which contains a series of linked nodes connected togetehr to form a hierarchical representation
        - like a linkedlist where each node has the option of pointing towards multiple nodes
        - Vertice - a certain node in a Trees
        - Edge - A connection between Nodes
        - Root Node - topmost node of a Trees
        - Child Node - a certain node which has an edge connecting it to another Node one level above itself
        - Parent Node - Any node which has 1 or more child Nodes
        - Leaf Node - A node in a tree which does not have any child Nodes

        - Height - Number of edges on thew longest path down towards a leaf
        - Depth - Number of edges required to get from that particular node to the root Node

        - Regular trees are great for storing hierarchical data, but their power can really be heightened when you start messing around with how the data is actually stored within them

        - Binary search tree is a simple variation on the stanbdard tree which has three restrictions to help organize the data
            1. A node can have at most 2 children
            2. for parent Node, the child to the left has a value less than or equal to itself, the the right child has a value greater than or equal to itself
            3. No 2 nodes can contain the same value

        - The biggest advantage of Binary Search trees is that we're able to search through them in Logarithmic Time
            - better bang for your buck the more data we have
            - Makes them popular for storing large quantities of data that need to be easily searchable
            
        - Uses for Trees
            - hierarchical Data
        
    9. Tries - Sprecial restriction tree
            - Trie tree like data structure whose nodes store letters of an alphabet in the form of characters
            - We can carefully construct this tree of characters in such a way which allows us to quickly retrieve words in the form of Strings by traversing down
            a path of the trie in a certain way
            - Flagging : marking the end of a word by having it also point towards a Flagging

            Uses for Tries
                - auto complete type text, also educated guesses when typing stuff out
        
    10. Heaps
        - A special tree where all parent Nodes compoare to their children Node's in some specific way by being more or less extreme
            - either greater than or less than
            - Determines where the data is stored
            - Usually dependent on the parent Node's value

        Min-Heap
            - the value at the Root Node of the Tree must be the minimum amongst all of its children
            - This fact must be the same recursively for all parent Node's contained within the Heap

        Max-Heap
            - The value at the Root Node of the tree must be the maximum amongst all of its children
            - This fact must be the same recursively for all parent Node's contained within the Heap

        Building Heaps example:

        
        0 : 70
        1 : 4
        2 : 90
        3 : 45
        4 : 23
        5 : 76
        6 : 100

        Step 1 : recursively go up tree and swap Nodes if necessary. Either greater than or less than the node above it.
        
            70 -> 4 : No swaps necessary
            70  -> 4 : left most
                -> 90 : right most

            since 90 is great than 70

             90  -> 4 : left most
                -> 70 : right most

             90  -> 4 -> 45 : left most
                -> 70 : right most

                But 45 is greater than 4 and to keep max-heap property we swap the 4 with 45 
                also compare 45 with node above it so in this case 90, but 90 is greater so it stays.
             90 -> 45 -> 4 : left most
                -> 70 : right most

                And so on

        Deleting from Heaps
        1. Remove the root node from our heap
        2. Replace it with the Node furthest to the right
        3. "Heapify" the Heap by comparing parent Node's to their children ans swapping if necessary


        Heaps are most commnanly used in the implementation of Heapsort
            - Heapsort is a sorting algo which takes in a list of elements, builds them into a min or max heap, then removes the root Node
            continously to make a sorted list.

    11. Graph
        - A nonlinear DS consisting of Nodes and edges
            - finite set of Nodes
            - Nodes are connected by the edges

        - multiple starting point/node
        
        Visualization:

        Vertices: - represents the node in the graph
        {1,2,3,4,5,6}
        
        ordered pairs describes relationships between nodes.
        {(6,4), (4,5),(4,3),(3,2),(5,2),(2,1), (5,1)}

        Relationships that occur between 2 nodes:

        Undirected graph:
            - a graph in which the direction you traverse the NOdes ISN'T important

        Directed graph:
            - a graph in which the direction you traverse the Nodes IS important

        Cyclic graph:
            - one which contains a path from atleast one Node back to itself

        Acyclic graph:
            - one which contains no path from any one Node which leads back in on itself

        Weighted Graphs:
            - Associating a numerical value with each edge
            - each weight represents some property of the information you're trying to convey   


        3 most popular:

        1. Undirected Cyclical Heap with weighted edges can be used through Dijkstra's shortest path algo

        - compiles a list of the shortest possible paths from that source vertex to all other Nodes within the Graph. 



        2. Unweighted Cyclical Graphs (Undirected and directed) are used in the follower system of a majority of social media websites
            - FB, Snapchat, Insta, Twitter

        
        
        



        

            