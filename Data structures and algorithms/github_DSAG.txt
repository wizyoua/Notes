Linked List - This is O(1), a constant-time operation. To find something is linear just like an array

	- A linked list is a linear collection of data elements in which linear order is not given by their physical placement in memory. Each element just points to the next. It is a data structure consisting of a group of nodes which together represent a sequence. 
		
		Pros: This structure allows for efficient insertion or removal of elements from any position in the sequence during iteration. 

		Cons: drawback of linked lists is that access time is linear and difficult to pipeline. Faster access, such as random access is not feasible. Arrays have better cache locality than linked lists.

		Youtube summary: insertions and deletions can be very quick, unlike array where you could access a certain position say a[4] to reach 5th position of array a. BUT an array is slower when it comes to removing or adding something to the array because things will have to shift.

			- Doubly linked list: each element not only links to next but also previous element.

		Linked List Article: https://codeburst.io/js-data-structures-linked-list-3ed4d63e6571

			- a linked list is nothing more than object nested deeply inside of each other.

				const list = {
				    head: {
				        value: 12
				        next: {
				            value: 99
				            next: {
				                value: 37
				                next: null
				            }
				        }
				    }
				};
			- The next property of each node object in the list is a reference to the next node object.
			- a linked list has items accessible only through the parent object, i.e. the previous item. 



		Writing a singly linked list with a head.

		Class Linkedlist {
			constructor(value) {
				this.head = {
					value;
					next: null
				};
				this.length = 1;
			}
		}

		console.log(new LinkedList('Hello!'));


Doubly Linked List
	- a doubly linked list is a linked data structure that consists of a set of sequentially linked nodes. Each node contains 2 field called links that are references to the previous and next node in the sequence. 

	- advantages of doubly link list. A pointer to any node you could look not only to next node but also previous node. 



Queue

 - A queue is a particular kind of abstract data or collection where the entities in the collection are kept in order and the principle operations on the collection are the addition of entities to the rear position(enqueue) and removal of entities from the front position(dequeue).

 	Youtube Summary:
 		- Stack: is a LIFO data structure (Last In First Out)
 		- Queue: is a FIFO data structure (First in First Out)



 	Var stack = function(){
 		this.size = 0;
 		this.storage = {};

 		this.push = function(data){
 			this.storage[this.size] = data;
 			this.size ++;
 		}

 		this.pop = function(){
 			if(this.size === 0) {
 				return undefined; 
 			}

 			this.size--;
 			var removed = this.storage[this.size];
 			delete this.storage[this.size];
 			return removed;
 			
 		}
 	}






Stack
 - A stack is an abstract data type that serves as a collection of elements, with 2 operations
 	- Push: Which adds an element to the collection
 	- Pop: which removes the most recently added element that was not yet removed

 	The order in which elements come off a stack gives rise to another name. LIFO (Last In, First Out). Also a peek operation? could give access to the top without modifying the stack. the name "stack" comes from an analogy of stacking physical items stacked on top of each other, which makes it easy to take an item off the stack while getting something off from the middle may require to remove multiple items first.





















