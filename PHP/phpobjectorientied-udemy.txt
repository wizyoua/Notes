Section 2 

Variables, arrays, loops

	var: $myVar1 = 'Hello';

	array: $numbers = array(1,2,3,4,5);
		   $numbers = [1,2,3,4,5];
	access all in array: print_r($numbers);
	access a single item: echo $numbers[1];

	//assosiative array
	$ages = array (
		"John" => 35,
		"Mary" => 35,
		"Bob" => 35,
	)

	echo $ages['Mary'];
	echo count($ages);
	takes one out of array from end: array_pop($ages);
	takes one out of array from beggining: array_shift($ages);
	print_r($ages);

	//for loop
	for($i = 0; $i < 5; $i++){
		echo $i;
	}

	//while loop - set var outside loop

	$i = 0;
	while($i <= 10) {
		echo 'Number '. $i. '<br />';
		$i++;
	}

	//foreach loop

	$numbers = array(1,2,3,4,5);
	foreach($numbers as $number){
		echo 'This is number ' . $number. '<br />';
	}

Functions and Conditional Statements

	function greet(){
		echo 'Hello World';
	}
	greet();

	function greet($name) {
		echo 'Hello '. $name;
	}
	greet('Bob');


	$num = 10;

	if($num == 10){
		echo 'Correct';
	}

	$num2 = 50;
	if($num2 == 50 || $num2 == 40){
		echo 'correct';
	}



Section 3

OOP Overview	
	
	what is oop - is a programming language model organized around "object" rather than "actions" and "data" rather than "logic"

	oop advantages 
	- code reuse
	- ecapsulation
	- design benefits
	- software maintenance
	
	Basic syntax 

	Class User {
		public $someProperty;
		public function someFunction(){
			//do something
		}
	}

	Visibility
	public - accessible outside of class
	protected - accessible in class and only extended classes
	private - accesible only in owner class

	Inheritance

	Classes can be extended to a child class
	Child classes have access to all of it's parents properties and methods UNLESS the visibility is set to private

	Class ChildClass extends ParentClass {

	}

	Instantiate & use a class
	
	To create an instance:
	$user = new User;

	- Print a property
	<?php echo $user->firstName; ?>

	- call a method/function
	<?php $user->register(); ?>

	Abstract Classes

	abstract class someClass {
		abstract public function someFunction(){

		}
	}
	- can NOT be instantiated and used directly 
	- if a property or method is "abstract" then the class also MUST be "abstract"



Classes & Methods

	class User {

		public $id;
		public $username;
		public $email;
		public $password;

		//constructors is called when the class is instantiated
		public function __construct($username, $password){
			echo 'Constructor called';
			$this->username = $username;
			$this->password = $password;
		}

		public function register(){
			echo 'User Registered';
		}

		public function login(){
			$this->auth_user();
		}

		public function auth_user($username, $password){
			echo $this->username . ' is authenticated';
		}

		//Anything you need to run at end of script
		public function __destruct(){
			echo 'Destructor Called';
		}
	
	}

	$user = new User;
	
	$user->register();
	$user->login('brad', '1234');


Getters and Setters and Inheritance

	class Post{
		private $name;

		public function __set($name, $value){
			echo 'Setting ' . $name. ' to' . $value;
			$this->name = $value; 
		}

		public function __get($name){
			echo 'Getting ' . $name . $this->name;
		}

		public function __isset($name){
			echo 'Is' . $name. ' set? <br />';
			return isset($this->name);
		}
	}

	$post = new Post;
	$post->name = 'Testing';
	echo $post->name;
	var_dump(isset($post->name));

Class Inheritance

	class First{
		public $id = 23;
		protected $name = 'bob';

		public function saySomething(){
			echo 'Something...';
		}
	}

	class Second extends First{
		public function getName(){
			echo $this->name;
		}
	}

	$second = new Second;

	echo $second->getName();

Section 4

Static Properties & Methods

