1. Relational vs non-relational databases
    - structured data: pre-defined organizations property and is easily searchable. You set its schema/type for the fields and tables. SQL is structured
    - unstructured data: no pre-defined schema. You can't search it. NoSQL is unstructured
    - semi-structured data: JSON/XML is semi-structured. basically data that have some structured data and uns data combined. Like images with metadata
2. MySQl history
    - mysql consists of 3 layers:
        1. Application/client layer: responsible for the client connections, authorization auth and security 
        2. Server layer: responsible for the query parsing, query optimization, query execution, and query results
        3. Storage engine layer: responsible for the data storage and retrieval
3. Commands:
    /** databases **/
    SHOW DATABASES; //shows all databases
    USE database_name; //selects a database
    SHOW CREATE DATABASE mysql; //shows the create statement for the database
    
    /** tables **/
    SHOW TABLES;
    DESCRIBE table_name; //shows the table structure
    SHOW CREATE TABLE table_name; //shows the create statement for the table
    SHOW COLUMNS FROM table_name; //shows the columns of the table


    /** CREATE DATABASE **/
    CREATE DATABASE database_name; //creates a database
    CREATE DATABASE IF NOT EXISTS database_name; //creates a database if it doesn't exist
    DROP DATABASE database_name; //deletes a database

    /** CREATE TABLE **/
    CREATE TABLE table_name (
        column_name1 data_type restriction,
        column_name2 data_type,
        column_name3 data_type,
        ...
    );

    column structure: columnName columnType [NOT NULL | NULL] [DEFAULT columnValue]
    DESC table_name; //shows the table structure same as DESCRIBE table_name;

    /** Prevent duplicate entries **/
    - in a relational db we can uniquely identify a row by its primary key
    - primary key: a column or a combination of columns that uniquely identifies a row in a table
    - AUTO_INCREMENT: a column that automatically increments by 1 for each new row inserted into the table
    - auto increment can only be used by one column in a table, can't have default vals, must be indexed, isn't portable to other db's and is reset when we drop table

    /** INSERT DATA **/
    INSERT INTO table_name(column_name1, column_name2, column_name3, ...) VALUES (value1, value2, value3, ...);
    - we can insert multiple records at once by separating the values with a comma
    - DEFAULT for timestamp is CURRENT_TIMESTAMP so it will automatically insert the current timestamp

    Alternative syntax:
    INSERT INTO table_name VALUES(value1, value2, value3, ...); the column names are implied by the order of the values 

    
    /** QUERYING DATA **/
    SELECT * FROM table_name; //selects all columns from the table
    SELECT column_name1, column_name2 FROM table_name; //selects specific columns from the table
    SELECT FirstName from Actors WHERE FirstName = 'John' //selects all rows where the FirstName column is John 
    SELECT FirstName from Actors WHERE neworth > 2000 //selects all rows where the neworth column is greater than 2000

    Commonaly used operators:
    =, <, >, <=, >=, !=, <>, LIKE, IN, BETWEEN, IS NULL, IS NOT NULL
    <>: not equal to query looks like : SELECT * FROM table_name WHERE column_name <> value;
    Like: used to search for a pattern in a column. % is a wildcard character that matches zero or more characters. _ is a wildcard character that matches exactly one character. SELECT * FROM table_name WHERE column_name LIKE 'pattern';
    IN: used to specify multiple values in a WHERE clause. SELECT * FROM table_name WHERE column_name IN (value1, value2, value3, ...);
    BETWEEN: used to select values within a given range. SELECT * FROM table_name WHERE column_name BETWEEN value1 AND value2;
    IS NULL: used to test for NULL values. SELECT * FROM table_name WHERE column_name IS NULL;

    More Like: 
        - Like works only with string data Types
        - can match 0 or more characters after the pattern so "Joe%" will match "Joe", "Joe Smith", "Joe Smith Jr", "Joe Smith Sr", etc
        SELECT * FROM table_name WHERE column_name LIKE "%" //selects all rows because it matches 0 or more characters
    "_enn%" will match Jennifer because the underscore matches the first character and the rest of the pattern matches the rest of the string
        SHOW DATABASES LIKE "M%" //shows all databases that start with M

    /** COMBINING CONDITIONS **/

    AND: used to combine multiple conditions. SELECT * FROM table_name WHERE column_name1 = value1 AND column_name2 = value2;
    OR: used to combine multiple where if one condition is met. SELECT * FROM table_name WHERE column_name1 = value1 OR column_name2 = value2;
        - We can combine both the AND and OR operators in a single query: SELECT * FROM table_name WHERE column_name1 = value1 AND (column_name2 = value2 OR column_name3 = value3);
    Think about the SQL structure like this:
    SELECT * | column_1, column_2 

    NOT: used to reverse the result of a condition. SELECT * FROM table_name WHERE NOT column_name = value; //selects all rows where the column_name is not equal to value
    XOR: if one of the conditions is satisfied but not both then it returns true. SELECT * FROM table_name WHERE column_name1 = value1 XOR column_name2 = value2; //selects all rows where column_name1 is equal to value1 or column_name2 is equal to value2 but not both

    /** ORDERING RESULTS **/
    - we can order the results of a query by using the ORDER BY clause at the end of the query
    - the default order is ascending, to order by descending we use the DESC keyword

    ORDER_BY: SELECT * FROM table_name ORDER BY column_name1, column_name2; //orders the results by column_name1 and then by column_name2
    SELECT * FROM Actors ORDER BY FirstName DESC; //orders the results by FirstName in descending order
    SELECT * FROM Actors ORDER BY NetWorthInMillions, FirstName; //orders the results by NetWorthInMillions and then by FirstName to avoid ties
    SELECT * FROM Actors ORDER BY NetWorthInMillions DESC, FirstName ASC; //orders the results by NetWorthInMillions in descending order and then by FirstName in ascending order, remember that the first order by happens then the second order by happens

    ASCII Comparison to order strings:
    SELECT * FROM Actors ORDER BY BINARY FirstName; //
    SELECT * FROM Actors ORDER BY CAST(NetWorthInMillions AS CHAR); //orders the results by NetWorthInMillions as a string


    /** LIMITING RESULTS **/
    - we can limit the number of results returned by using the LIMIT clause at the end of the query
    LIMIT: SELECT * FROM table_name LIMIT number; //returns the first number of rows

    SELECT FirstName, SecondName from Actors ORDER BY NetWorthInMillions DESC LIMIT 3; //returns the top 3 actors by NetWorthInMillions in descending order
    SELECT FirstName, SecondName from Actors ORDER BY NetWorthInMillions DESC LIMIT 4 OFFSET 3; // returns the next 4 actors after the first 3 by NetWorthInMillions in descending order
    SELECT FirstName, SecondName from Actors ORDER BY NetWorthInMillions DESC LIMIT 3,4; //returns the next 4 actors after the first 3 by NetWorthInMillions in descending order. same thing as offset but the values are switched

    /** DELETING DATA **/

    DELETE FROM Actors WHERE FirstName="priyanka"; //deletes all rows where the FirstName is priyanka
    DELETE FROM Actors WHERE Gender="Male"; // deletes all rows where the Gender = Male
    DELETE FROM Actors ORDER BY NetWorthInMillions DESC LIMIT 3; //deletes the top 3 actors by NetWorthInMillions in descending order
    DELETE FROM Actors; //deletes all rows from the table but not the table itself


    /** TRUNCATE TABLE **/
    - TRUNCATE TABLE is faster than DELETE FROM because it does not log each row that is deleted. Use this when we know we just want to delete all the rows from a table and not the table itself, it's 
    also used to reconstruct the table faster.
    TRUNCATE table_name; //deletes all rows from the table but not the table itself

    /** UPDATING DATA **/
    - we can update data in a table using the UPDATE statement. We can also use it to change te value of a column for a row or multiple rows
    UPDATE Actors SET NetWorthInMillions=1; //updates all rows in the NetWorthInMillions column to 1
    UPDATE Actors SET NetWorthInMillions=5 ORDER BY FirstName LIMIT 3; //updates the top 3 actors by FirstName to have a NetWorthInMillions of 5
    UPDATE Actors SET NetWorthInMillions=50, MaritalStatus="Single"; //updates all rows in the NetWorthInMillions column to 50 and the MaritalStatus column to Single

    /** INDEXES AND PRIMARY KEYS **/
    - indexes are used to speed up searches in a table. They are created using the CREATE INDEX statement
    - there are Clustered and Non-Clustered indexes
    - The data structure the db use is called a B tree
    - A clustered index doesnâ€™t imply that the data rows are contiguously stored on the hard disk
    SHOW ENGINES; //shows the different storage engines available
    - on clustered index the leaf nodes dont hold data but rather a pointer to the data stored elsewhere\
    - a table like this is called a heap pile of data, which is unordered pile of data


    Struture: 
    UPDATE table_name
    SET col1 = val
    WHERE <condition>
    ORDER BY 5
    LIMIT 5;






    FROM table_name
    WHERE logical_operator happens AND another logical operator happens

SQL DATA Types:
    Numeric: INT, BIGINT, TINYINT, DECIMAL
    DATE and TIME: DATE, DATETIME, TIMESTAMP, TIME, YEAR
    STRING: VARCHAR, CHAR, ENUM, SET, BLOB
    JSON: json
    SPATIAL DATA: location size and shape of objects on earth. POINT, LINESTRING, POLYGON, GEOMETRY, GEOMETRYCOLLECTION, MULTILINESTRING, MULTIPOINT, MULTIPOLYGON

COMMON DATA TYPES:
    varchar: variable length string. up to 65,535 characters, varchar(20) means 20 characters
    char: fixed length string. up to 255 characters, char(20) means 20 characters including spaces and is implying that the string is 20 characters long always.

Temporary Tables:
CREATE TEMPORARY TABLE table_name (
    column_name1 data_type,
    column_name2 data_type,
    column_name3 data_type,
    ...
);

- can be used to work with data in a temporary manner, also complex queries can be written in a temporary table and then used in a query
- only lasts for the duration of the session 

Collation and Character Set:
- collation: a set of rules for comparing characters in a character set
- character set defines what characters MySQL can store

SHOW CHARACTER SET; //shows all character sets
SHOW COLLATION; //shows all collations


JOINS
    /** TYPES OF JOINS **/
    - Cross Join: returns the cartesian product of the tables. Pick first row of table_a and join it with every row of table_b, then pick the second row of table_a and join it with every row of table_b
    - Inner Join: join predicate determines if a row from table_a should be joined with a row from table_b
    - Left Join: returns all rows from table_a and the matching rows from table_b. All rows from table_a are returned even if there is no match in table_b, but 
    table_b rows are joined only if there is a match in table_a
    - Right Join: returns all rows from table_b and the matching rows from table_a. All rows from table_b are returned even if there is no match in table_a, but
    table_a rows are joined only if there is a match in table_b
    - Full Outer Join: returns rows from both tables, rows that eval to true are only included once, and rows that didn't match have null inserted
    - Self join: a table is joined with itself

    /** Self inner join **/
    SELECT * FROM table_a INNER JOIN table_a ON table_a.column_name = table_a.column_name; //joins table_a with itself on the column_name column
    SELECT * FROM Actors a INNER JOIN Actors b USING(FirstName); //same thing as above but using the USING keyword
    SELECT * FROM Actors a INNER JOIN Actors b USING(NetWorthInMillions); 

    /** Inner Join **/
    SELECT FirstName, SecondName, AssetType, URL
    FROM Actors 
    INNER JOIN DigitalAssets  
    ON Actors.Id = DigitalAssets.ActorID; //joins the Actors table with the DigitalAssets table on the Id column of Actors and the ActorID column of DigitalAssets

    SELECT FirstName, SecondName, AssetType, URL 
    FROM Actors 
    INNER JOIN DigitalAssets 
    USING(Id); // same thing as above but using the USING keyword, using is ok to use since both columns have the same name

    - we don't even need to use inner join:
    SELECT FirstName, SecondName, AssetType, URL 
    FROM Actors, DigitalAssets 
    WHERE ActorId=Id; //comma separated tables where the ActorId column of Digital Assets is equal to the Id column of Actors
