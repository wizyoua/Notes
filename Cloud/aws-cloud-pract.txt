AWS Cloud practitioner Essentials


Module 1: Introduction to AWS
    1. intro
    - aws offers compute storage, network security, blockchain
    - basic computer models are client-server model.
    - ec2 is a virtual server in the cloud
    - you only pay for what you use (key val: pay for what you need)

    2. Cloud computing:
        - on demand delivery of it resources over internet with pay as you go prices.
        Cloud compuing models:
            - Infrastruture as a service
            - Platform as a service
            - Software as a service

Module 2: Computing in the cloud 
    1. intro
        - aws built data centers, racked the servers, ect... 
        - when you spin up ec2 you are virtualizing a server and sharing underlying hardware. hypervisor is the software that does this.
        - you control networking and storage
        - Compute as a service is basically what aws and all other cloud providers are
    
    2. ec2 instance type
        - each instance type is grouped under a instance family
        - general purpose provide balanced resources
        - compute optimized provide high performance processors
        - memory optimized provide high memory
        - accelerated computing provide high performance for graphics intensive workloads
        - storage optimized provide high, sequential read and write performance
    
    3. ec2 pricing
        - on demand: pay for what you use
        - savings plan -> reserved: pay for what you use, but for a year or 3 years
        - spot: pay for what you use, but you can be interrupted. basically you are getting discounted because the instances are extra but then aws can reclaim it with a 2 min warning 
        - dedicated hosts: pay for what you use, but you have a physical server
    
    4. scaling ec2
        - scalability and elasticity. 
        - you cant scale up or down on on premise servers, hence why aws 
        helps you scale up and down different instances.
        - ec2 auto scale ha 2 options
        - dynamic scaling responds to changing demand
        - predictive scale based on forecasted demand
        - scale up adds more power
        - scale out adds more servers

    5. Directing traffic with elastic load balancing
        - elastic load balancing is a service that distributes incoming traffic across multiple targets
        - basically if more traffic comes in, the ELB will also scale as well as our instances in order to handle the traffic
    
    6. Messaging & Queuing 
        - there is a queue in between the requests and instances.
        - Tightly coupled systems are bad because if one fails, the whole system fails
        - loosely coupled systems are preffered since it won't affect the rest of the system

        Example:
        Sys1 -> messageQueue -> Sys2 

        - Amazon SQS or SNS are used for messaging and queuing
            - SQS : send and store messages between software components (data contained in message is called payload)
            - SNS: does same thing as SQS but also can send messages to subscribers

        - Monolithic vs Microservices
            - monolithic: all services are in one application
            - microservices: each service is in its own application
    
    7. Additional compute services
        - Serverless: you dont have to manage servers, you just write code and it runs
            - AWS Lambda: you can run code without provisioning or managing servers.
                - lambda function is where you upload your code, the trigger checks any changes and then runs the code
        - AWS container services: (container orchastration service, basically docker)
            - container: a package for our code, that run on top of ec2 instances.
            - container orchestration: allows you to manage containers, but the tools were made since it's still diffucult to handle it at scale.
            - ECS: allows you to run docker containers on aws
            - EKS: allows you to run kubernetes on aws
            - Fargate (serverless): allows you to run containers without having to manage servers or clusters


Module 3: Global Infrastructure and reliability
    - we need high availability and fault tolerance
    - aws has a ton of data centers using fiber to connect them
    - Regions: each region is isolated from each other and can only be moved by yourself  
        - compliance: check your requirmens for your data
        - proximity: latency is important, speed of light is the law of the universe. (latency is the time it takes for a packet to travel from one point to another)
        - feature availability: some features are only available in certain regions
        - pricing : some locations are cheaper than others

    2. Edge locations: 
        - using CDN to place a cache of data closer to the user
        - AWS cloudfront: a content delivery network (CDN) that delivers data, videos, applications, and APIs to users with low latency and high transfer speeds
        - they use edge locations and are separate from regions. You can push data from region to edge locations
        - AWS route 53: a DNS service that routes users to the closest edge location

        - what if you wanted to push data inside your own data center, uses AWS outpost

    3. How to provision AWS resources: https://aws.amazon.com/about-aws/global-infrastructure/regions_az/
        - in AWS everything is an API (application programming interface)
        - you can use the aws console, cli, or sdk to provision resources
        - aws sdk we can use programming languages to provision resources

        - how to interact with aws
            - aws console: web based interface
            - aws cli: command line interface
            - aws sdk: software development kit
            - aws elasticbeanstalk : allows you to provision and manage instances
            - aws cloudformation: Infrastructure as code tool, basically using json/yaml to provision resources


Module 4: networking
    - VPC: virtual private cloud, allows you to create a virtual network in the cloud
    - subnet: ranges of ip addresses in a VPC
        - public subnet: subnet that has a route to the internet gateway
        - private subnet: subnet that does not have a route to the internet gateway
    
    1. Connectivity to AWS
        - VPC: allows you to create a virtual network in the cloud
         - subnet and networking rules allow resources to be public or private

         - Internet gateway: allows communication between your VPC and the internet
         - private gateway : virtual private gateway allows us to create a secure connection between our VPC and our on premise data center
         - problem with VPG is it still uses te regular internet connection
         - AWS Direct Connect: allows you to create a dedicated network connection between your data center and AWS. low latency high security.
    
    2. subnets and network access control list 
        - Network hardening: 
        - Network ACL: allows you to control traffic in and out of your subnets, check the packets and allow or deny them, based on who sent them and how it's trying to communicate
        - Security Groups: allows you to control traffic in and out of your instances. AWS auto sets them to block any traffic.
            - website accepts https traffic from , but not OS or admin requests
        - security group vs network acl is that security group is stateful and network acl is stateless. 
            - stateful: if you allow traffic in, you automatically allow traffic out
            - stateless: you have to allow traffic in and out
        
        Flow of a packet:
            packet -> security group -> network acl -> subnet 2 -> network acl - > security group -> packet
            packet-> security group -> network acl -> subnet 1 -> network acl -> security group -> packet
    
    3. Global Networking
        - Route 53: a DNS service(domain name system) that routes users to the closest edge location. We can also direct to different routing
            - latency based routing
            - weighted routing
            - geolocation routing
            - failover routing

        - AWS Cloudfront: can serve websites to users based on their geo location. 

Module 5 : Storage and databases
    
    1. Instance stores and Amazon Elastic Block store
        

