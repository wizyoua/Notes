AWS Cloud practitioner Essentials


Module 1: Introduction to AWS
    1. intro
    - aws offers compute storage, network security, blockchain
    - basic computer models are client-server model.
    - ec2 is a virtual server in the cloud
    - you only pay for what you use (key val: pay for what you need)

    2. Cloud computing:
        - on demand delivery of it resources over internet with pay as you go prices.
        Cloud compuing models:
            - Infrastruture as a service
            - Platform as a service
            - Software as a service

Module 2: Computing in the cloud 
    1. intro
        - aws built data centers, racked the servers, ect... 
        - when you spin up ec2 you are virtualizing a server and sharing underlying hardware. hypervisor is the software that does this.
        - you control networking and storage
        - Compute as a service is basically what aws and all other cloud providers are
    
    2. ec2 instance type
        - each instance type is grouped under a instance family
        - general purpose provide balanced resources
        - compute optimized provide high performance processors
        - memory optimized provide high memory
        - accelerated computing provide high performance for graphics intensive workloads
        - storage optimized provide high, sequential read and write performance
    
    3. ec2 pricing
        - on demand: pay for what you use
        - savings plan -> reserved: pay for what you use, but for a year or 3 years
        - spot: pay for what you use, but you can be interrupted. basically you are getting discounted because the instances are extra but then aws can reclaim it with a 2 min warning 
        - dedicated hosts: pay for what you use, but you have a physical server
    
    4. scaling ec2
        - scalability and elasticity. 
        - you cant scale up or down on on premise servers, hence why aws 
        helps you scale up and down different instances.
        - ec2 auto scale ha 2 options
        - dynamic scaling responds to changing demand
        - predictive scale based on forecasted demand
        - scale up adds more power
        - scale out adds more servers

    5. Directing traffic with elastic load balancing
        - elastic load balancing is a service that distributes incoming traffic across multiple targets
        - basically if more traffic comes in, the ELB will also scale as well as our instances in order to handle the traffic
    
    6. Messaging & Queuing 
        - there is a queue in between the requests and instances.
        - Tightly coupled systems are bad because if one fails, the whole system fails
        - loosely coupled systems are preffered since it won't affect the rest of the system

        Example:
        Sys1 -> messageQueue -> Sys2 

        - Amazon SQS or SNS are used for messaging and queuing
            - SQS : send and store messages between software components (data contained in message is called payload)
            - SNS: does same thing as SQS but also can send messages to subscribers

        - Monolithic vs Microservices
            - monolithic: all services are in one application
            - microservices: each service is in its own application
    
    7. Additional compute services
        - Serverless: you dont have to manage servers, you just write code and it runs
            - AWS Lambda: you can run code without provisioning or managing servers.
                - lambda function is where you upload your code, the trigger checks any changes and then runs the code
        - AWS container services: (container orchastration service, basically docker)
            - container: a package for our code, that run on top of ec2 instances.
            - container orchestration: allows you to manage containers, but the tools were made since it's still diffucult to handle it at scale.
            - ECS: allows you to run docker containers on aws
            - EKS: allows you to run kubernetes on aws
            - Fargate (serverless): allows you to run containers without having to manage servers or clusters


Module 3: Global Infrastructure and reliability
    - we need high availability and fault tolerance
    - aws has a ton of data centers using fiber to connect them
    - Regions: each region is isolated from each other and can only be moved by yourself  
        - compliance: check your requirmens for your data
        - proximity: latency is important, speed of light is the law of the universe. (latency is the time it takes for a packet to travel from one point to another)
        - feature availability: some features are only available in certain regions
        - pricing : some locations are cheaper than others

    2. Edge locations: 
        - using CDN to place a cache of data closer to the user
        - AWS cloudfront: a content delivery network (CDN) that delivers data, videos, applications, and APIs to users with low latency and high transfer speeds
        - they use edge locations and are separate from regions. You can push data from region to edge locations
        - AWS route 53: a DNS service that routes users to the closest edge location

        - what if you wanted to push data inside your own data center, uses AWS outpost

    3. How to provision AWS resources: https://aws.amazon.com/about-aws/global-infrastructure/regions_az/
        - in AWS everything is an API (application programming interface)
        - you can use the aws console, cli, or sdk to provision resources
        - aws sdk we can use programming languages to provision resources

        - how to interact with aws
            - aws console: web based interface
            - aws cli: command line interface
            - aws sdk: software development kit
            - aws elasticbeanstalk : allows you to provision and manage instances
            - aws cloudformation: Infrastructure as code tool, basically using json/yaml to provision resources


Module 4: networking
    - VPC: virtual private cloud, allows you to create a virtual network in the cloud
    - subnet: ranges of ip addresses in a VPC
        - public subnet: subnet that has a route to the internet gateway
        - private subnet: subnet that does not have a route to the internet gateway
    
    1. Connectivity to AWS
        - VPC: allows you to create a virtual network in the cloud
         - subnet and networking rules allow resources to be public or private

         - Internet gateway: allows communication between your VPC and the internet
         - private gateway : virtual private gateway allows us to create a secure connection between our VPC and our on premise data center
         - problem with VPG is it still uses te regular internet connection
         - AWS Direct Connect: allows you to create a dedicated network connection between your data center and AWS. low latency high security.
    
    2. subnets and network access control list 
        - Network hardening: 
        - Network ACL: allows you to control traffic in and out of your subnets, check the packets and allow or deny them, based on who sent them and how it's trying to communicate
        - Security Groups: allows you to control traffic in and out of your instances. AWS auto sets them to block any traffic.
            - website accepts https traffic from , but not OS or admin requests
        - security group vs network acl is that security group is stateful and network acl is stateless. 
            - stateful: if you allow traffic in, you automatically allow traffic out
            - stateless: you have to allow traffic in and out
        
        Flow of a packet:
            packet -> security group -> network acl -> subnet 2 -> network acl - > security group -> packet
            packet-> security group -> network acl -> subnet 1 -> network acl -> security group -> packet
    
    3. Global Networking
        - Route 53: a DNS service(domain name system) that routes users to the closest edge location. We can also direct to different routing
            - latency based routing
            - weighted routing
            - geolocation routing
            - failover routing

        - AWS Cloudfront: can serve websites to users based on their geo location. 

Module 5 : Storage and databases
    
    1. Instance stores and Amazon Elastic Block store
        - ec2 instance stores: temporary storage that is attached to the life cycle of the instance. If the instance fails, the data is lost.
        - EBS: create virtual hard drives (ebs volumes) that can be attached to ec2 instances. EBS volumes are persistent and independent of the life cycle of the instance. If the instance fails, the data is still there.
            - ebs takes snapshots of the data and stores it.

    2. Amazon Simple Storage service
        - S3: object based storage, allows you to upload files and access them from anywhere. Unlimited amount of data stored and retrieved. usually called buckets. Max storage is 5TB per object.
        - can create multiple bucket, and set permissions for each bucket
        - S3 standard: 99.99% availability, 99.999999999% durability, 11 9's
        - s3 static website hosting: allows you to host a static website on s3
        - s3 standard-infrequent access: for long term storage but not needed
        - s3 glacier: archive data that needs to be stored for a long time.
        - lifecycle policies allow you to move data from one storage class to another based on time or access

        - comparing EBS vs s3
            - EBS 16 TIB max size, survive termincation of ec2 instance, SSD by default
            - S3, unlimited storage, write once read many, objects up to 5 TB each, regionally distributed, web enabled 
            - object storage : any file as discrete object, if there is change to object you must reupload the entire file
            - block storage: storage that is attached to a single instance, updates are applied to changes to those certain blocks

    3. Amazon Elastic File System
        - Amazon EFS: multiple instances can access data at the same time
        - EBS volumes are availability zone level resource, need to be in the same zone to attach ec2 instances.
        - EFS can have multiple instance read/write same time, true Linux file system, Regional resource, auto scales.
    
    4. Amazon RDS
        -  RDS: managed relational database service, allows you to create and manage databases in the cloud.
        - amazon aurora: a relational database service that is can be mysql or postgres 1/10th the cost of RDS, data replication, point-in time recovery
    5. Dynamo DB
        - serverless DB where we don't need to manage the intances.
        - only create a table and add data
        NoSQL DB : not relational, flexible schema
        can't run complex queries only on keys. The queries tend to be simpler and faster but less complex
        (on prime 2 day event they had over 4 trillion requests about 45 million per second)

    6. Amazon Redshift
        - large amounts of data can overwhelm relational db's 
        - data warehouses are designed for big data. like historical analytics instead of operational data
        - if you are looking at historical data then warehouse would be the way to go (at a heavy scale)
        - redshift is a data warehouse service that is fully managed and can scale to petabytes of data
            - can run queries on hexabytes of data
    
    7. Amazon DB migration service (DMS)
        - migrate data between source and target databases
        - source remains fully operational
        - homogeneous migration: same type of database
        - heterogeneous migration: different types of data between source and target. This converts source schema to target schema
            - development and test database migrations
            - database consolidation 
            - database replication

    8. Additional database services
        - DocumentDB(mongo compatibility)
        - Neptune(graph database): social media
        - Amazon Managed Blockchain: blockchain service and decentralized components
        - Amazon Quantum Ledger Database: ledger database for financial transactions where records are immutable
        - Caching layers: ElastiCache, Redis, Memcached
        - Dynamodb -> DAX (DynamoDB Accelerator): in memory cache for dynamodb
        
Module 6: Security
    1. Shared Responsibility module
        - Both parties customer and aws are responsible for security
        - customer: security of data, applications, and infrastructure
        - aws: responsible for security of the cloud
            aws: physical, network, hypervisor
            customer: OS, application, data
    
    2. User permissions and access
        - account root user (master user, turn on MFA)
        - AWS Identity and Access Management (IAM)
            - IAM users: users that you create and manage(can reate json policy for user)
            - IAM groups: collection of users(attach policy to group and all users in group get that policy)
            - IAM roles: associated permissions, allow/deny , grant access to resources, users, apps, and other services. Role takes over any pre-existing permissions
            - IAM policies: document that defines permissions

    3. AWS Organizations
        - AWS Organizations: allows you to manage multiple AWS accounts
        - SCP: service control policy, allows you to set permissions for accounts in your organization, restrict services, resuorces and even api access.

    4. Compliance
        - GDPR: General Data Protection Regulation
        - HIPAA: Health Insurance Portability and Accountability Act
        - a user owns their own data, you can make sure your data is not somewhere or another region where it shouldn't be
        - AWS Artifact: allows you to see what services you are using and what region you are using them in. These are compliance reports done by third parties.
    
    5. Denial of service attacks (DDos)
        - attack that overwhelms a service with traffic
        - UDP flood: low level attacks
        - HTTP level attacks: attack the application layer
        - Slow Loris: attack where attacker pretends to have slow connection and keeps connection open in order to slow down other requests. (ELB prevents this)

        - AWS Shield: 
            - AWS WAF: web application firewall, protects against common web exploits
            - shield standard: included for all aws members
            - shield advanced: additional protection for DDoS attacks
    
    6. Additional Security Services
        - Encryption: securing a message and only authorized keys can access it.
        - DynamoDB table is auto encrypted
        - Amazon Inspector: automated security assessment service on your infrastructure
        - Amazon guard duty: threat detection service that monitors for malicious activity and unauthorized behavior

Module 7: Monitoring and analytics
    1. Introduction
        - set up monitoring in the cloud to keep track of aws resources.
    2. AWS Cloudwatch
        - allows us to monitor infra. and applications
        - cloudwatch alarm, set threshold for metric and CW will trigger alert and perform and action. Even integrated with smallest
        - CW dashboard: lists out metrics and shows everything pretty much
        - reduce MTTR and improve 
        - insights to optimize applications and operations solutions

    3. AWS Cloudtrail
        - every action is programmatic
        - logs all api calls(across entire aws)
        - would use to check history of any sort of requests
    
    4. AWS trusted advisor:
        5 pillars are:
        1. cost optimization
        2. performance
        3. security
        4. fault tolerance
        5. service limits

        - checks for best practices
        - checks for security, performance, fault tolerance, cost optimization
        - can be automated to run on a schedule

Module 8: Pricing and Support
    1. going over plan and budget for application

    2. AWS Free Tier: 
        - Credit Limit free tier:
            1. always free
            2. 12 months free
            3. Trials

    3. Pricing Concepts: 
        - go over free tiers
    
    4. Billing Dashboard
        - Billing dash will show you all the charges for the month, current and forecasted amounts
    
    5. Consolidated Billing 
        - a singular company can have multiple aws accounts, using organizations. You can consolidate billing for all accounts under one account.
    
    6. AWS Budgets
        - can get notifications before yuo go over budget
    
    7. AWS cost explorer
        - console based service visually see how we are spending our money
    
    8. AWS support Plans
        - basic: 24/7 access to support center, community forums, and documentation, whitepapers, aws trusted advisor
        - developer: basic + email customer support 
        - business: developer + direct phone access, infrastructure event management
        - enterprise: business + TAM(technical account manager)

    9. AWS Marketplace
        - 3rd party software and services
        - can be used to purchase software and services
        - can be used to sell software and services