Note This Course is Learn Computer Science using Python. 

Week 1
	
	Types: 
		int - represent integers
		float - represent real numbers (3.27)
		bool - represents  boolean value true/false
		NoneType - special and has one value, None
		can us Type() to see the type of object
	
	Operators and Branching
		 - i and j are any variable of numbers
		 - i > j
		 - i >= j
		 - i < j
		 - i <= j
		 - i == j - equal
		 - i != j - not equal

		 - and b are any var names
		 - not a - true if a is false, false if a is true


		 Branching programs
		 - the simplest branching statement is a conditional
		  - A test 
		  - a block of code to execute test
		  - an optional block of code to execute if the test is false
		  - in python we don't have to have the false block


		 Compound Boolean
		 	- if x < y and x < z:
		 		print ('x is least')
		 	elif y < z :
		 		print ('true')
		 	else: 
		 		print ('true')

	Bindings
		- names we have associated with Value
		-simple var. A = 5
	Strings
		- letters, special chars, spaces, digits
		- enclosed in quotation marks
		- concat strings
		

	Input/Output
		- used to output stuff to console
		- keyword is print

		- input("")
			- prints whatever is within the quotes
			- user types in something and hits enter
			- returns entered sequence
			- can bind that value to a var so it could reference it
			- input returns a string so must cast if working with numbers

	Control Flow
		- using control in loops
			- simple branching programs just make choices, but path through code is still linear
			- sometimes you want to reuse parts of the code in an undetermined number of times
			While <condition>
				<expression>
				<expression>
			- if condition is true do all steps inside code block

			for <variable> in range(<some numb>:)
				<expression>

			- each time through the loop, <variable> takes a value
			- first time, <variable> starts at the smallest value
			- next time, <variable> gets the prev value +1

			range (start, stop, step)

			- break statement
				- exits whatever loop we are in
				- skips remaining expressions
	Iteration
		- concept of iteration lets us extend simple branching algorithms to be able to write programing of arbitrary concept
			- start with test
			- if true execute loop body
			- repeat until false

	Loop Characteristics
		- Need a loop variable
			- initialized outside loop
			- changes within loop
			- test for termination depending on ccondition
		- Common errors
			- what if we dont initialize the variable
			- what if we dont change the var var inside the loop
				- ex getting infinite loop
	Guess and Check
		- you are able to guess a value for solution
		- you are able to check if the solution is correct
		- keep guessing until find solution or guessed all values
		- THIS process is exhaustive enumeration
			x = int(input('Enter an integer: '))

			ans = 0

			while ans**3 < x:
			    ans = ans + 1  <------- THE TEST IS RIGHT HERE
			    
			if ans**3 != x: 
			    print(str(x) + ' is not a perfect cube')
			else:
			    print('Cube root of ' + str(x) + ' is ' + str(ans))



	Cleaner guess and check
		- cube root
			- using for loop with range 
			- supposed you put root without a root
			- this is to understand how to approach problems and figure out the most efficient ways with it. 

			cube = 8
			for guess in range(cube + 1):
				if guess**3 == cube:
					print ("Cube root of ", cube, "is", guess)



	



	Problem Set 1 Week 1
		- Problem 1

			//string
			s = 'azcbobobegghakl'
			//convert string to list
			list(s)
			//make array of valid letters that check against the string
			arrayValid = ['a','e','i','o','u']
			//init count to keep track
			count = 0

			//for loop go through every item in array
			for x in list(s):
				//another for loop go through item in vowel array
			    for v in arrayValid:
			    	//does the letter of the string match any valid letter
			       	if x == v:
			       		//yes so add the count
			           	count += 1

			print ("Number of vowels:" + str(count))

		- Problem 2

			//string
			s = 'wefewfewfbobobwefewfewfboobobwefewf'
			//set count to keep track
			count = 0

			//run for loop of range(which accepts number so find length of string)
			for x in range(len(s)):
				//splice string (so x is the actually just a number continuing with the length of the string and not the actual index of a letter) so based on that we are going back into the string every time and then splicing the [index start, index end] of the string
			   	if s[x:x+3] == 'bob':
			   		//if the string of bob appears add 1 to counter
			       count +=1
			print('Number of times bob occurs is ' + str(count))
    	
    	- problem 3
    	//string
		s = 'wefewfewfbobobwefewfewfboobobwefewf'
    	
    	current = ''
		longest = ''

		for i in range(len(s)):
		    if (s[i] >= s[i-1]):
		        current += s[i]
		    else:
		        current = s[i]
		    if len(current) > len(longest):
		        longest = current
		print("Longest substring in alpha order is: " + longest)



Week 2
	

	Approximate Solutions - works for 0 - 1
		- good enough solution
		- Start with a guess and increment by some small value
		- decreasing increment size -> slower program

	Bisection Search - works for ordering
		- Instead of starting at 1 for a search we could start in between the number range
		- On each step we don't use have the things so it's easy to zero in on the result. 
		- this is a logarithmic time algorithm
		- Reduces computation time
		- should work on any problem with "ordering" property


	Dealing with Floats
		- Floats approximate  real numbers
		- Decimal number: 302 = 3*10^2 + 0^*10^1+2^*10^0


		- Go back to learn how to use python to convert an integer or floats to binary. 

	Newton-Raphson
		- General approximation algorithm to find roots of a polynomial in one variable
		- want to find r such that p(r) = 0
		- example: to find the sqaure root of 24, find the root of p(x) = x^2 -24
		- NEwton Showed that if g is an appromiation to the root, then 
		- simple case cx^2 + k

		- Iterative algorithms
			- guess and check method build on resuing same code. Use a looping structure construct to generate guesses, then check and continue
			- Generate guesses
				- exhaustive enumeration
				- bisection search
				- newton raphson 

	Decomposition, Abstraction, Functions
		- Good programming
			- More code not a good thing

			- Abstraction - do not need to know how it works to use it.

		- Apply these ideas to programming: 
			- Decomposition:
				- Break problem into different contained pieces
			- Abstraction
				- Suppress details of method to compute something from use of that computation.


		- Create Structure with decomposition
			- in programming divide code into modules
			- are self contained
			- used to break up code
			- intended to be reusable
			- keep code organized
			- keep code coherent


		- suppress details with abstraction
			- think of piece of code as a black box
			- cannot see details
			- do not want to see details
			- hide tedious coding details
			- achieve abstraction with function specification or docstrings

	Introducing Functions
		- write resuable piece/chunks of code called functions
		- functions are not run until invoked
		- function has name, parametes, has a docstring (optional but recommended), body

		- docstring is really just a summary of what the function does
		
		def is_even(i):
			print("hi")
			return i%2 == 0;

		is_even(3);

		
		
















