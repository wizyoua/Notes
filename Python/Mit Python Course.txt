Week 1
	
	Types: 
		int - represent integers
		float - represent real numbers (3.27)
		bool - represents  boolean value true/false
		NoneType - special and has one value, None
		can us Type() to see the type of object
	
	Operators and Branching
		 - i and j are any variable of numbers
		 - i > j
		 - i >= j
		 - i < j
		 - i <= j
		 - i == j - equal
		 - i != j - not equal

		 - and b are any var names
		 - not a - true if a is false, false if a is true


		 Branching programs
		 - the simplest branching statement is a conditional
		  - A test 
		  - a block of code to execute test
		  - an optional block of code to execute if the test is false
		  - in python we don't have to have the false block


		 Compound Boolean
		 	- if x < y and x < z:
		 		print ('x is least')
		 	elif y < z :
		 		print ('true')
		 	else: 
		 		print ('true')

	Bindings
		- 
	Strings
		- letters, special chars, spaces, digits
		- enclosed in quotation marks
		- concat strings
		

	Input/Output
		- used to output stuff to console
		- keyword is print

		- input("")
			- prints whatever is within the quotes
			- user types in something and hits enter
			- returns entered sequence
			- can bind that value to a var so it could reference it
			- input returns a string so must cast if working with numbers

	Control Flow
		- using control in loops
			- simple branching programs just make choices, but path through code is still linear
			- sometimes you want to reuse parts of the code in an undetermined number of times
			While <condition>
				<expression>
				<expression>
			- if condition is true do all steps inside code block

			for <variable> in range(<some numb>:)
				<expression>

			- each time through the loop, <variable> takes a value
			- first time, <variable> starts at the smallest value
			- next time, <variable> gets the prev value +1

			range (start, stop, step)

			- break statement
				- exits whatever loop we are in
				- skips remaining expressions
	Iteration
		- concept of iteration lets us extend simple branching algorithms to be able to write programing of arbitrary concept
			- start with test
			- if true execute loop body
			- repeat until false