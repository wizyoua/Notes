Basic Module Components
	
	1. New Module Declarations
		- new module -> app/code. Create directory for namespace and module. Single Module directory
		- first file is registration.php
		- <?php 
			\Magento\Framework\Component\ComponentRegistrar::register(
				\Magento\Framework\Component\ComponentRegistrar::MODULE,
				'Mastering_SampleModule',
				__DIR__
			);

		- Create etc then module.xml
			- Insert necessary xml code
			- switch to command line
				- bin/magento dev:urn-catalog:generate .idea/misc.xml
			- <sequence>Dependency on other modules for example magento catalog

		- enable module
			- bin/magento module:enable Mastering_SampleModule

			- check app/etc/config.php -> new module should be there

			-run db upgrade in cl
				- bin/magento setup:upgrade
				- in php storm check db with: select * from setup_module where module = 'Mastering_SampleModule';
				- result should return with schema and data version.

	2. Database Install Scripts

		- inside samplemodule create new directory as /Setup
		- create new file installSchema.php

		- Get sample data code
			- create new table
				
				$table = $setup->getConnection()->newTable(
					$setup->getTable('mastering_sample_item')
				)->addColumn(
					'id',
					Table::TYPE_INTEGER,
					null,
					['identity' => true, 'nullable' => false, 'primary' => true],
					'ItemID'
				)->addColumn(
					Table::TYPE_TEXT,
					255,
					['nullable'=> false],
					'Item Name'
				)->addIndex(
					$setup->getIdxName('mastering_sample_item',['name']),
					['name']
				)->setComment(
					'Sample Items'
				); 
				$setup->getConnection()->createTable($table);

		- create installdata script
			- installData.php
				- put in sample data code

				$setup->getConnection()->insert(
					$setup->getTable('mastering_sample_item'),
					[
						'name' => 'Item 1'
					]
				);

				$setup->getConnection()->insert(
					$setup->getTable('mastering_sample_item'),
					[
						'name' => 'Item 2'
					]
				);

		- Now we have to run
			- php db console: delete select * from setup_module where module = "Mastering_SampleModule";

			- cl: bin/magento setup:upgrade

	3. Database Upgrade Scripts
		-  create UpgradeSchema.php

		- insert sample data
			- 

			if(version_compare($conrect->getVersion(), '1.0.1', '<')){
				$setup-getCOnnection()->addColumn(
					$setup-getTable('mastering_sample_item'),
					'description',
					[
						'type' => Table::TYPE_TEXT,
						'nullable => true,
						'comment' => "Item Desc"

					]
				);
			}

		- Create UpgradeData.php
		- insert sample data
			if(version_compare($conrect->getVersion(), '1.0.1', '<')){
			 	$setup-getConnection()->update(
					$setup->getTable('mastering_sample_item'),
					[
						'description' => 'Default Desc'
					],
					$setup->getConnection->quoteInto('id = ?', 1)
				);
			}

		- Run and upgrade script in cl
			- bin/magento setup:upgrade

	4. Model Layer
		- create dir in Module /Model then create new dir ResourceModel -> item.php
			
			<?php 
			 	namespace Mastering\SampleModule\Model\ResourceModel

			 	use Magento\Framework\Model|resourceModel\Db\AbstractDb;

			 	class Item extends AbstractDb {
			 		protected function _construct() {
			 			$this->init('mastering_sample_item', 'id');
			 		}
			 	}


		- Create item.php in Model dir
			<?php 
				namespace Mastering\SampleModule\Model;

				use Magento\Framework\Model\AbstractModel;

				class Item extends AbstractModel {

					protected function _construct()
					{
						$this->_init(\Mastering\SampleModule\Model\ResourceModel\Item::class);
					}

				}


		- Create dir /item under ResourceModel -> collection.php
			<?php 

			namespace Mastering\SampleModule\Model\ResourceModel]Item;

			use Magento\Framework\Model\ResourceModel\Db\Collection\AbstractCollection;
			use Mastering\SampleModule\Model\Item;
			use Mastering\SampleModule\Model\ResourceModel\Item as ItemResource;

			class Collection extends AbstractCollection
			{
				protected $_idFieldName = 'id';

				protected function _construct()
				{
					$this->_init(Item::class, ItemResource::class)
				}
			}


	5. Controller Layer






			